// Specifify special rules for SORN Neurons (Homeostatic plasticity and synaptic norm)
// JEFF: This script throws an exception, but not for creating these subclasses...
// Here we would want this to be compiled 
class SORNNeuron extends Neuron {
    List<Synapse> exInc = new ArrayList<Synapse>();
    double etaIP = 0.001;
    double hipTarget = 0.4;

    SORNNeuron(Network parent) {
        super(parent, new SpikingThresholdRule());
    }

    void update() {
        // Synaptic Normalization
        double su = 0;
        for (int i = 0, n = exInc.size(); i < n; i++) {
            su += exInc.get(i).getStrength();
        }
        for (int i = 0, n = exInc.size(); i < n; i++) {
            exInc.get(i).setStrength(exInc.get(i).getStrength()/su);
        }
        // Homeostatic Plasticity
        SpikingThresholdRule rule = ((SpikingThresholdRule) getUpdateRule());
        rule.setThreshold(rule.getThreshold() + (etaIP * ((isSpike() ? 1:0)
            - hipTarget)));

        // Perform regular update
        super.update();
    }

    void addAfferent(Synapse synapse) {
        super.addAfferent(synapse);
        if (synapse.getStrength() >= 0) {
            exInc.add(synapse);
        }
    }

};

// Specifiy the SORN's simplified STDP rule
// JEFF: Here we'd want this to be compiled....
class SimpleSTDP extends SynapseUpdateRule {
    double lrate = 0.001;
    void init(Synapse synapse){
    }
    SimpleSTDP(){
            
    }
    SynapseUpdateRule deepCopy() {
        //System.out.println("I Happen");
        SimpleSTDP cpy = new SimpleSTDP();
        cpy.lrate = this.lrate;
        return cpy;
    }
    String getDescription() {
        return "Simple version of an STDP rule.";
    }
    void update(Synapse synapse) {
        double deltaW = ((synapse.getTarget().getSpkBuffer() ? 1:0)
            * (synapse.getSource().isSpike() ? 1:0))
            - ((synapse.getTarget().isSpike() ? 1:0)
            * (synapse.getSource().getSpkBuffer() ? 1:0));
        deltaW *= lrate;
        synapse.setStrength(Polarity.EXCITATORY.clip(synapse.getStrength() + deltaW));   
    }
}
