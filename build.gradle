import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.7.0'
    // id 'checkstyle'
    // Fixes problem with long filenames
    id "ua.eshepelyuk.ManifestClasspath" version "1.0.0"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

def version = "4Beta"

def simbrainJvmArgs = [ '--add-opens','java.base/java.util=ALL-UNNAMED',
                        '--add-opens','java.desktop/java.awt=ALL-UNNAMED',
                        '--add-opens','java.desktop/java.awt.geom=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
//                        '-Djava.library.path', '/opt/homebrew/opt/openblas/lib/',
//                        '-Dorg.bytedeco.openblas.load', 'blas'
]
mainClassName = 'org.simbrain.workspace.gui.Splasher'
compileJava.options.encoding = 'UTF-8'

def docs = "docs"
def dist = "${buildDir}/dist"
def buildMain = "${buildDir}/main"

// When updating also search for "jvmTarget" and update those
sourceCompatibility = 1.17

repositories {
    mavenCentral()
}

dependencies {

    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.7.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-swing:1.6.4'

    // Kotlin DL
    implementation 'org.jetbrains.kotlinx:kotlin-deeplearning-tensorflow:0.5.0'
    implementation 'org.jetbrains.kotlinx:kotlin-deeplearning-dataset:0.5.0'
    implementation 'org.jetbrains.kotlinx:kotlin-deeplearning-dataset-jvm:0.5.0'

    // Smile
    implementation group: 'com.github.haifengl', name: 'smile-core', version: '3.0.1'
    implementation 'com.github.haifengl:smile-kotlin:3.0.1'
    implementation 'com.github.haifengl:smile-plot:3.0.1'
    implementation 'com.github.haifengl:smile-nlp:3.0.1'
    implementation group: 'org.bytedeco', name: 'openblas-platform', version: '0.3.21-1.5.8'

    // JUnit
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation(platform('org.junit:junit-bom:5.7.1'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.0')

    // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    // jsoup HTML parser library @ https://jsoup.org/
    implementation 'org.jsoup:jsoup:1.15.4'

    //https://mvnrepository.com/artifact/org.ostermiller/utils
    implementation group: 'org.ostermiller', name: 'utils', version: '1.07.00'

    // https://mvnrepository.com/artifact/org.tinylog/tinylog/1.3.6
    implementation group: 'org.tinylog', name: 'tinylog', version: '1.3.6'
    // https://mvnrepository.com/artifact/org.tinylog/tinylog-impl
    runtimeOnly group: 'org.tinylog', name: 'tinylog-impl', version: '2.6.1'
    // https://mvnrepository.com/artifact/org.tinylog/slf4j-tinylog
    runtimeOnly group: 'org.tinylog', name: 'slf4j-tinylog', version: '2.6.1'

    // https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream
    implementation group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.20'

    // https://mvnrepository.com/artifact/org.piccolo2d/piccolo2d-extras
    implementation group: 'org.piccolo2d', name: 'piccolo2d-extras', version: '3.0.1'
    implementation group: 'org.piccolo2d', name: 'piccolo2d-core', version: '3.0.1'

    // https://mvnrepository.com/artifact/org.jfree/jfreechart
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.5.4'

    // https://mvnrepository.com/artifact/org.swinglabs/swingx-core
    implementation group: 'org.swinglabs', name: 'swingx-core', version: '1.6.2-2'

    // https://mvnrepository.com/artifact/com.miglayout/miglayout-swing
    implementation group: 'com.miglayout', name: 'miglayout-swing', version: '11.0'

    // https://mvnrepository.com/artifact/com.fifesoft/rsyntaxtextarea
    implementation group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '3.3.1'

    // https://mvnrepository.com/artifact/org.beanshell/bsh
    implementation group: 'org.beanshell', name: 'bsh', version: '2.0b5'

    // JMonkeyEngine
    implementation 'org.jmonkeyengine:jme3-core:3.6.0-stable'
    implementation 'org.jmonkeyengine:jme3-jbullet:3.6.0-stable'
    implementation 'org.jmonkeyengine:jme3-desktop:3.6.0-stable'
    implementation 'org.jmonkeyengine:jme3-lwjgl:3.6.0-stable'
}

application {
    applicationDefaultJvmArgs = simbrainJvmArgs
}

test {
    jvmArgs simbrainJvmArgs
    useJUnitPlatform()
}

// Sample invocation:
// gradle runSim -PsimName="Test Sim"
task runSim(type: JavaExec) {
    jvmArgs simbrainJvmArgs
    classpath = sourceSets.main.runtimeClasspath
    main = "org.simbrain.custom_sims.RegisteredSimulationsKt"
    if(project.hasProperty('simName')){
        args simName
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
    kotlinOptions.freeCompilerArgs += "-Xuse-experimental=kotlin.experimental.ExperimentalTypeInference"
    kotlinOptions.freeCompilerArgs += "-Xjvm-default=all"
    kotlinOptions.freeCompilerArgs += "-Xcontext-receivers"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
    kotlinOptions.freeCompilerArgs += "-Xuse-experimental=kotlin.experimental.ExperimentalTypeInference"
    kotlinOptions.freeCompilerArgs += "-Xjvm-default=all"
    kotlinOptions.freeCompilerArgs += "-Xcontext-receivers"
}


// Configure the shadow plugin
shadowJar {
    archiveClassifier.set('shadow')
    manifest {
        attributes 'Main-Class': 'org.simbrain.workspace.gui.Splasher'
    }
}


task buildDistribution(type: Copy) {
    dependsOn shadowJar

    doFirst {
        // Get the path to the JAR file created by the shadowJar task
        File shadowJarFile = shadowJar.archiveFile.get().getAsFile()

        // Set the source for the copy operation
        from shadowJarFile
    }

    // Copy docs
    from("${docs}") {
        into 'docs'
    }

    // Copy simulations
    from('simulations') {
        exclude '**/archives/**'
        into 'simulations'
    }

    from("scripts") {
        into "scripts"
    }

    from "etc/License.txt"

    // Set the base destination directory for all copy operations
    into "${buildMain}"

}

task cleanDistribution {

    doLast {
        delete dist
    }
}


task jpackageMacOS(type: Exec) {

    onlyIf { OperatingSystem.current().isMacOsX() }

    dependsOn cleanDistribution
    dependsOn shadowJar
    dependsOn buildDistribution

    def iconFile = 'etc/simbrain.icns'

    def javaHome = System.getProperty("java.home")
    def jpackageBinary = OperatingSystem.current().isWindows() ? 'jpackage.exe' : 'jpackage'
    def jpackagePath = file("${javaHome}/bin/${jpackageBinary}")

    doFirst {
        // Define JVM arguments
        def jvmArgs = [
                '-Duser.dir=\$APPDIR',
                '--add-opens=java.base/java.util=ALL-UNNAMED',
                '--add-opens=java.desktop/java.awt=ALL-UNNAMED',
                '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED'
        ].join(' ')

        // Set up the jpackage command and its arguments
        executable jpackagePath
        args '--input', buildMain,
                '--main-jar', 'simbrain-shadow.jar',
                '--dest', dist,
                '--name', 'Simbrain',
                '--app-version', version,
                '--icon', iconFile,
                '--java-options', jvmArgs,
                '--type', 'app-image'
    }
}

task signMacApp(type: Exec, dependsOn: jpackageMacOS) {
    // Only execute the task if running on macOS
    onlyIf { OperatingSystem.current().isMacOsX() }

    def appPath = "${dist}/Simbrain.app"
    def signingIdentity = System.getenv('SIGNING_IDENTITY')

    doFirst {
        if (signingIdentity == null || signingIdentity.isEmpty()) {
            throw new GradleException("SIGNING_IDENTITY environment variable is not set or empty.")
        }

        // Set up the codesign command and its arguments
        executable 'codesign'
        args '-fs', signingIdentity, appPath
    }
}

task createMacDmg(type: Exec, dependsOn: signMacApp) {
    // Only execute the task if running on macOS
    onlyIf { OperatingSystem.current().isMacOsX() }

    def appPath = "${dist}/Simbrain.app"
    def dmgPath = "${dist}/Simbrain-${version}.dmg"

    doFirst {
        // Set up the hdiutil command and its arguments
        executable 'hdiutil'
        args 'create', '-volname', 'Simbrain', '-srcfolder', appPath, '-ov', '-format', 'UDZO', dmgPath
    }
}

task jpackageWindows(type: Exec) {
    onlyIf { OperatingSystem.current().isWindows() }

    dependsOn cleanDistribution
    dependsOn shadowJar
    dependsOn buildDistribution

    def iconFile = 'etc/simbrain.ico'

    def javaHome = System.getProperty("java.home")
    def jpackageBinary = OperatingSystem.current().isWindows() ? 'jpackage.exe' : 'jpackage'
    def jpackagePath = file("${javaHome}/bin/${jpackageBinary}")

    doFirst {
        // Define JVM arguments
        def jvmArgs = [
                '-Duser.dir=\$APPDIR',
                '--add-opens=java.base/java.util=ALL-UNNAMED',
                '--add-opens=java.desktop/java.awt=ALL-UNNAMED',
                '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED'
        ].join(' ')

        // Set up the jpackage command and its arguments
        executable jpackagePath
        args '--input', buildMain,
                '--main-jar', 'simbrain-shadow.jar',
                '--dest', dist,
                '--name', 'Simbrain',
                '--app-version', version,
                '--icon', iconFile,
                '--java-options', jvmArgs,
                '--win-menu',
                '--win-menu-group', 'Simbrain',
                '--vendor', 'Simbrain'
    }
}

task signWindowsApp(type: Exec, dependsOn: jpackageWindows) {
    onlyIf { OperatingSystem.current().isWindows() }

    def appPath = "${dist}/Simbrain-${version}.exe"

    doFirst {

        // Set up the codesign command and its arguments
        executable signtool
        args 'sign', '/a', '/fd', 'SHA256', appPath
    }
}