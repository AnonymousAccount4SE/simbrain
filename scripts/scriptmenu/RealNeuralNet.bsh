import java.awt.geom.Point2D;
import java.util.*;
import java.io.*;
import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.core.NeuronUpdateRule.InputType;
import org.simbrain.network.groups.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neurons.*;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.synapse_update_rules.*;
import org.simbrain.network.synapse_update_rules.spikeresponders.*;
import org.simbrain.network.update_actions.*;
import org.simbrain.util.randomizer.*;
import org.simbrain.util.SimbrainConstants.Polarity;
import org.simbrain.util.math.*;
import org.simbrain.workspace.*;

/**
 * 
 * @author Zach Tosi
 *
 * Creates a network of recurrently connected Izhikevich neurons (Regular
 * Spiking by default). Neurons are placed in a 2D lattice and connections
 * between neurons are probabilistic based on their relative distance from
 * one another. Specifically the probability of a connection existing between
 * Neurons a and b: 
 *
 *              P(a, b) = C_xy * e ^ -(D(a,b)/lambda^2)
 *
 * Such that x is the polarity (inhibitory or excitatory) of neuron a and
 * y is the polarity of neuron b, and D(a, b) is the Euclidean distance between
 * a and b in pixels. C_xy is a regulating constant which controls the overall
 * proportion of connections between neurons based on their polarity. Thus there
 * are C_ee, C_ei, C_ie, and C_ii values. This is so that (for instance), one
 * can make connections from inhibitory neurons to other inhibitory neurons
 * overall less common than connections from inhibitory to excitatory neurons,
 * etc. Lambda is another regulating constant which represents the average
 * distance between connected neurons. Each synapse has a delay which is a 
 * logarithm of the distance between the neurons it connects. 
 * Equation and parameter values (except lambda) are taken from Maass 2002.
 *
 * Each Izhikevich neuron is connected to exactly one Linear neuron in the
 * second neuron group. Such that the activation of each neuron in the second
 * group corresponds to the current post-synaptic potential of the Izhikevich
 * neuron connected to it. Essentially the neuron group on the right represents
 * the convolved spike trains of the spiking neurons on the left such that
 *
 *              A_n(t + delta_t) = - (delta_t *(A_n(t) / tau)) + S(t)
 *
 * Where A_n(t) is the activation of neuron n at time t, delta_t is the
 * integration time-step, tau is a decay constant and S(t) is whether or not
 * the (only) pre-synaptic Izhikevich neuron has spiked at time t (1 if so, 0
 * otherwise). Since each neuron in the second group recieves only one input,
 * this activity pattern is entirely the result of the spike responder
 * (ConvolvedJumpAndDecay) which governs n's only incoming synapse, not a
 * result of any internal dynamics on the part of neuron n. A_n(t) is just the
 * post synaptic response of the source Izhikevich neuron for a synapse with a
 * strength of 1, and is thus a simple convolution of its spike train. 
 *
 * In summary this code displays a network of randomly connected spiking neurons
 * with a Lognormal weight distribution and distance-based connectivity and
 * displays the convolution of their individual spike trains on the right.
 *
 */
{
    // Parameters 
    final boolean USE_INHIB = false;
    final boolean STDP_ON = true;
    int NUM_NEURONS;
    int GRID_SPACE = 25;
    double EE_CONST = 0.3;
    double EI_CONST = 0.2;
    double IE_CONST = 0.4;
    double II_CONST = 0.1;
    double LAMBDA = 250;

    List<Double> prefFiringRates = new ArrayList<Double>();
    List<Double> sorted = new ArrayList<Double>();
    Scanner scan = null;
    try {
        FileReader fr = new FileReader("./firingRates.csv");
        Scanner scan = new Scanner(fr);
        scan.useDelimiter(",|\\n");
        while (scan.hasNextDouble()) {
            double d = scan.nextDouble();
            prefFiringRates.add(d);
            sorted.add(d);
        }
        scan.close();
    } catch (IOException ie) {
        ie.printStackTrace();
    } finally {
        if (scan != null) {
            scan.close();
        }
    }
    NUM_NEURONS = prefFiringRates.size();

    Collections.sort(sorted);
    Collections.reverse(sorted);
    double inhibThreshold = sorted.get((int)(0.4 * sorted.size()));

    // Build Network
    NetworkComponent networkComponent = new NetworkComponent("Network");
    workspace.addWorkspaceComponent(networkComponent);
    Network network = networkComponent.getNetwork();
    network.setTimeStep(0.5);
    GridLayout layout = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    layout.setInitialLocation(new Point(10, 10));
    GridLayout layout2 = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    layout2.setInitialLocation(new Point(NUM_NEURONS * 100, 10));
    List<Neuron> neurons = new ArrayList<Neuron>(NUM_NEURONS);
    List<Neuron> outNeurons = new ArrayList<Neuron>(NUM_NEURONS);

    // Optional code to distribute neurons in 3D space with random z values
    // Random rand = new Random();
    Randomizer rand = new Randomizer();
    rand.setPdf(ProbDistribution.NORMAL);
    rand.setParam1(0);
    rand.setParam2(0.5);
    Random randi = new Random();
    for (int i = 0; i < NUM_NEURONS; i++) {
        Neuron neuron = new Neuron(network);
        neurons.add(neuron);
        IntegrateAndFireRule lif = new IntegrateAndFireRule();
        // Set the preferred firing rate to the firing rate in the data
        lif.setPrefFR(prefFiringRates.get(i));
        //lif.setUsingIP(false);
        // Assume that faster firing neurons are inhibitory
        if (prefFiringRates.get(i) > inhibThreshold && USE_INHIB && Math.random() < 0.5) {
        	neuron.setPolarity(Polarity.INHIBITORY);
        	lif.setRefractoryPeriod(2.0);
            lif.setTimeConstant(20);
        } else {
        	neuron.setPolarity(Polarity.EXCITATORY);
        	lif.setRefractoryPeriod(3.0);
            lif.setTimeConstant(30);
        }
        lif.setTauA(5000);
        lif.setIpConst(10E3);
        lif.setLearningRate(10E-7);
        lif.setBackgroundCurrent(0.1);
        lif.setAddNoise(false);
        lif.setNoiseGenerator(rand);
        neuron.setUpdateRule(lif);
        Neuron outNeuron = new Neuron(network);
        outNeuron.getUpdateRule().setInputType(InputType.SYNAPTIC);
        ((LinearRule) outNeuron.getUpdateRule()).setClipped(false);
        outNeurons.add(outNeuron);
    }
    NeuronGroup ng1 = new NeuronGroup(network, neurons);
    ng1.setLabel("IP LIF Network");

    // Set neuron coordinates for connection...
    ng1.setXYZCoordinatesFromFile("xyCoors.csv");

    NeuronGroup outs = new NeuronGroup(network, outNeurons);
    outs.setLabel("Spike Visualizer");

    network.addGroup(ng1);
    network.addGroup(outs);
    
	SynapseGroup sg = new SynapseGroup(ng1, ng1);
    sg.setUpperBound(100000, Polarity.EXCITATORY);
    sg.setLowerBound(0, Polarity.EXCITATORY);
    sg.setLowerBound(-100000, Polarity.INHIBITORY);
    sg.setUpperBound(0, Polarity.INHIBITORY);
    Scanner wtSc = null;
    try {
        wtSc = new Scanner(new File("./weightMatTr.csv"));
        int i = 0;
        int j;
        Scanner lineScan = null;
        try {
                while (wtSc.hasNextLine()) {
                    lineScan = new Scanner(wtSc.nextLine());
                    lineScan.useDelimiter(",|\\n");
                    j = 0;
                    while (lineScan.hasNext()) {
                        String next = lineScan.next();
                        System.out.println(next);
                        double val = Double.parseDouble(next);
                        if (val > 0) {
                            Neuron src = ng1.getNeuronList().get(i);
                            val = 50000 * src.getPolarity().value(val) + 2;
                            Neuron tar = ng1.getNeuronList().get(j);
                            sg.addSynapseUnsafe(new Synapse(src, tar, val));
                        }
                        j++;
                    }
                    i++;
                    lineScan.close();
                }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (lineScan != null) {
                lineScan.close();
            }
        }
    } catch (IOException ie) {
        ie.printStackTrace();
    } finally {
        if (wtSc != null) {
            wtSc.close();
        }
    }
	sg.setSpikeResponder(new UDF(), Polarity.BOTH);
	sg.setLabel("Recurrent Synapses");
    final double LOG_2 = Math.log(2);
	for (Synapse s : sg.getAllSynapses()) {
		double dist = Network.getEuclideanDist(s.getSource(), s.getTarget());
        dist *= dist;
        int delay = (int) Math.ceil((Math.log(dist + 1) / LOG_2));
        delay = (int) Math.ceil(delay * (0.2 / network.getTimeStep()));
		s.setDelay(delay);
	}
    if (STDP_ON) {
    	LogSTDPRule stdp = new LogSTDPRule();
    	stdp.setLearningRate(0.00005);
    	stdp.setTau_minus(34);
    	stdp.setTau_plus(17);
    	sg.setLearningRule(stdp, Polarity.INHIBITORY);
    	LogSTDPRule stdp2 = new LogSTDPRule();
    	stdp2.setLearningRate(0.00005);
    	stdp2.setTau_minus(34);
    	stdp2.setTau_plus(17);
    	sg.setLearningRule(stdp2, Polarity.EXCITATORY);
    }
	network.addGroup(sg);

	SynapseGroup outCon = SynapseGroup.createSynapseGroup(ng1, outs, new OneToOne());
	outCon.setSpikeResponder(new ConvolvedJumpAndDecay(), Polarity.BOTH);
	outCon.setLabel("One to One Connections");
	network.addGroup(outCon);
	for (Neuron n : outs.getNeuronList()) {
		n.setUpperBound(3);
    		if (n.getFanIn().get(0).getStrength() < 0) {
    			((LinearRule) n.getUpdateRule()).setSlope(-1);
    		}
    }

    //ng1.setLayout(layout);
    //ng1.applyLayout(new Point2D.Double(0.0 ,0.0));
    outs.setLayout(layout2);
    outs.applyLayout(new Point2D.Double(1000.0, 0.0));
    print(sg.size());
    
    network.randomizeNeurons();
    network.fireSynapsesUpdated();
    network.getUpdateManager().clear();
    network.getUpdateManager().addAction(ConcurrentBufferedUpdate.createConcurrentBufferedUpdate(network));
    network.updateTimeType();
}
