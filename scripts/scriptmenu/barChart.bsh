import java.awt.Point;
import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.groups.*;
import org.simbrain.network.layouts.LineLayout.LineOrientation;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.plot.barchart.*;
import org.simbrain.plot.barchart.BarChartComponent.BarChartConsumer;
import org.simbrain.util.randomizer.*;
import org.simbrain.workspace.*;
import java.awt.Color;

//
// A simple network whose dynamics are plotted in a barchart.
//
{

    // PARAMETERS
    int numNeurons = 5;
    double sparsity = .3;
    double excitatoryRatio = .5;

    // CLEAR CURRENT WORKSPACE
    workspace.clearWorkspace();

    // BUILD NETWORK
    NetworkComponent networkComponent = new NetworkComponent("Recurrent Network");
    workspace.addWorkspaceComponent(networkComponent);
    desktop.getDesktopComponent(networkComponent).getParentFrame().setBounds(20, 20, 446, 337);
    Network network = networkComponent.getNetwork();
    NeuronGroup ng = new NeuronGroup(network, numNeurons);
    ng.setNeuronType("DecayRule");
    ng.setUpperBound(10);
    network.addNeuronGroup(ng);
    ng.randomize();

    // LAYOUT NEURONS
    LineLayout layout = new LineLayout(10,10,50, LineOrientation.HORIZONTAL);
    layout.layoutNeurons(network.getLooseNeurons());

    // CREATE SYNAPSES 
    Sparse.connectSparse(network.getFlatNeuronList(),
            network.getFlatNeuronList(), sparsity, false, false, true);
    ConnectionUtilities.randomizeAndPolarizeSynapses(network.getLooseSynapses(), excitatoryRatio);
    network.randomizeNeurons();

    //MAKE BARCHART
    BarChartComponent barChart = new BarChartComponent("Bar Chart of Recurrent Network");
    barChart.getModel().setBarColor(Color.blue);
    barChart.getModel().setAutoRange(false);
    barChart.getModel().setUpperBound(12);
    workspace.addWorkspaceComponent(barChart);
    desktop.getDesktopComponent(barChart).getParentFrame().setBounds(500,20,537,345);

    // COUPLING NETWORK TO BARCHART
    Producer neuronProducer = workspace.getCouplingManager().getProducer(ng, "getActivations");
    Consumer barChartConsumer =  workspace.getCouplingManager().getConsumer(barChart.getModel(), "setBarValues");
    workspace.getCouplingManager().createCoupling(neuronProducer, barChartConsumer);

    workspace.iterate();
}