package org.simbrain;

import java.awt.Point;
import org.simbrain.network.neurons.*;
import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.Sparse;
import org.simbrain.network.core.*;
import org.simbrain.network.groups.*;
import org.simbrain.network.layouts.GridLayout;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.plot.projection.*;
import org.simbrain.workspace.*;

{

	// PARAMETERS
    int numNeurons = 125;
    double sparsity = .01;
    double excitatoryRatio = .6;

    workspace.clearWorkspace();

    // Make Network
    NetworkComponent networkComponent = new NetworkComponent("Attractor Network");
    workspace.addWorkspaceComponent(networkComponent);
    Network network = networkComponent.getNetwork();
    GridLayout layout = new GridLayout();
    NeuronGroup ng = new NeuronGroup(network, numNeurons);
    ng.setNeuronType("NakaRushtonRule");
    ng.setUpperBound(100);
    network.addGroup(ng);
    ng.setLayout(layout);
    ng.applyLayout();
    ng.randomize();

    Sparse.connectSparse(network.getFlatNeuronList(),
            network.getFlatNeuronList(), sparsity, false, false, true);            
    network.randomizeNeurons();
    network.randomizeWeights();
    network.fireNeuronsUpdated();
    network.fireSynapsesUpdated();

    //Make a projection component
    ProjectionComponent chart = new ProjectionComponent("Projection of Attractor Network");
    workspace.addWorkspaceComponent(chart);
    desktop.getDesktopComponent(chart).getParentFrame().setBounds(500, 20, 500, 500);

    // Make Couplings
    Producer neuronProducer = CouplingUtils.getProducer(ng, "getSubsampledActivations");
    Consumer projectionConsumer = CouplingUtils.getConsumer(chart, "addPoint"); 
    workspace.getCouplingManager().tryCoupling(neuronProducer, projectionConsumer);


}
