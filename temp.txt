diff --git a/src/org/simbrain/custom_sims/simulations/cortex_simple/CortexSimple.java b/src/org/simbrain/custom_sims/simulations/cortex_simple/CortexSimple.java
index 7ea1ff8..5cc1d1a 100644
--- a/src/org/simbrain/custom_sims/simulations/cortex_simple/CortexSimple.java
+++ b/src/org/simbrain/custom_sims/simulations/cortex_simple/CortexSimple.java
@@ -19,6 +19,7 @@ import org.simbrain.util.math.ProbabilityDistribution;
 import org.simbrain.util.math.SimbrainMath;
 import org.simbrain.workspace.gui.SimbrainDesktop;
 
+import java.awt.geom.Point2D;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -158,7 +159,8 @@ public class CortexSimple extends RegisteredSimulation {
             sg.setLabel(sgn);
         }
 
-        network.fireGroupChanged(layer_4, "");
+        //TODO
+        //layer_4.fireGroupUpdated();
         // Todo; Add labels
 
         // Use concurrent buffered update
@@ -192,7 +194,7 @@ public class CortexSimple extends RegisteredSimulation {
         NeuronGroup ng = new NeuronGroup(network, neurons);
         network.addGroup(ng);
         ng.setLayout(layout);
-        //ng.applyLayout(new Point2D.Double(x, y));
+        ng.applyLayout();
         return ng;
     }
 
diff --git a/src/org/simbrain/custom_sims/simulations/hippocampus/Hippocampus.java b/src/org/simbrain/custom_sims/simulations/hippocampus/Hippocampus.java
index 65a3528..54a6291 100644
--- a/src/org/simbrain/custom_sims/simulations/hippocampus/Hippocampus.java
+++ b/src/org/simbrain/custom_sims/simulations/hippocampus/Hippocampus.java
@@ -15,6 +15,7 @@ import org.simbrain.workspace.gui.SimbrainDesktop;
 
 import javax.swing.*;
 import java.awt.*;
+import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Executors;
 
@@ -293,10 +294,11 @@ public class Hippocampus extends RegisteredSimulation {
      * Initialize weights randomly and uniformly between 0 and .02.
      */
     private void initWeights() {
-        for (Synapse synapse : network.getFlatSynapseList()) {
+        List<Synapse> synapses = network.getFlatSynapseList();
+        for (Synapse synapse : synapses) {
             synapse.setStrength(.2 * Math.random());
         }
-        network.fireSynapsesUpdated();
+        network.fireSynapsesUpdated(synapses);
     }
 
     /**
diff --git a/src/org/simbrain/custom_sims/simulations/mpfs_som/MpfsSOM.java b/src/org/simbrain/custom_sims/simulations/mpfs_som/MpfsSOM.java
index 86a074a..035f828 100644
--- a/src/org/simbrain/custom_sims/simulations/mpfs_som/MpfsSOM.java
+++ b/src/org/simbrain/custom_sims/simulations/mpfs_som/MpfsSOM.java
@@ -132,7 +132,8 @@ public class MpfsSOM extends RegisteredSimulation {
                     e.printStackTrace();
                 }
             }
-            network.fireGroupUpdated(som);
+            // TODO
+            //network.fireGroupUpdated(som);
             netWrapper.getNetworkComponent().update();
         });
 
@@ -190,7 +191,8 @@ public class MpfsSOM extends RegisteredSimulation {
                 }
 
             }
-            netWrapper.getNetwork().fireGroupUpdated(som);
+            //TODO
+            //netWrapper.getNetwork().fireGroupUpdated(som);
             netWrapper.getNetworkComponent().update();
         });
 
diff --git a/src/org/simbrain/network/NetworkComponent.java b/src/org/simbrain/network/NetworkComponent.java
index ff5875f..8e4a79e 100755
--- a/src/org/simbrain/network/NetworkComponent.java
+++ b/src/org/simbrain/network/NetworkComponent.java
@@ -18,9 +18,9 @@
 package org.simbrain.network;
 
 import org.simbrain.network.core.*;
-import org.simbrain.network.listeners.NetworkEvent;
-import org.simbrain.network.listeners.NeuronListener;
-import org.simbrain.network.listeners.SynapseListener;
+import org.simbrain.network.groups.Group;
+import org.simbrain.network.gui.NetworkPanel;
+import org.simbrain.network.gui.nodes.NeuronArrayNode;
 import org.simbrain.util.Utils;
 import org.simbrain.workspace.AttributeContainer;
 import org.simbrain.workspace.WorkspaceComponent;
@@ -66,57 +66,38 @@ public final class NetworkComponent extends WorkspaceComponent {
      * Initialize attribute types and listeners.
      */
     private void init() {
-        network.addNeuronListener(new NeuronListener() {
-            public void neuronAdded(NetworkEvent<Neuron> e) {
-                setChangedSinceLastSave(true);
-                fireAttributeContainerAdded(e.getObject());
-            }
-
-            public void neuronTypeChanged(NetworkEvent<NeuronUpdateRule> e) {
-                setChangedSinceLastSave(true);
-                fireAttributeContainerChanged(e.getObject());
-            }
-
-            public void neuronMoved(NetworkEvent<Neuron> e) {
-                setChangedSinceLastSave(true);
-            }
 
-            public void neuronRemoved(NetworkEvent<Neuron> e) {
-                setChangedSinceLastSave(true);
-                fireAttributeContainerRemoved(e.getObject());
+        network.addPropertyChangeListener(
+            evt -> {
+                if ("neuronAdded".equals(evt.getPropertyName())) {
+                     setChangedSinceLastSave(true);
+                     fireAttributeContainerAdded((Neuron) evt.getNewValue());
+                } else if ("neuronRemoved".equals(evt.getPropertyName())) {
+                    setChangedSinceLastSave(true);
+                    fireAttributeContainerRemoved((Neuron) evt.getNewValue());
+                } else if ("neuronsUpdated".equals(evt.getPropertyName())) {
+                    setChangedSinceLastSave(true);
+                } else if ("synapseAdded".equals(evt.getPropertyName())) {
+                    setChangedSinceLastSave(true);
+                    fireAttributeContainerAdded((Synapse) evt.getNewValue());
+                } else if ("synapseRemoved".equals(evt.getPropertyName())) {
+                    setChangedSinceLastSave(true);
+                    fireAttributeContainerRemoved((Synapse) evt.getNewValue());
+                } else if ("textAdded".equals(evt.getPropertyName())) {
+                    setChangedSinceLastSave(true);
+                } else if ("textRemoved".equals(evt.getPropertyName())) {
+                    setChangedSinceLastSave(true);
+                } else if ("groupAdded".equals(evt.getPropertyName())) {
+                    setChangedSinceLastSave(true);
+                    fireAttributeContainerAdded((Group) evt.getNewValue());
+                } else if ("groupRemoved".equals(evt.getPropertyName())) {
+                    setChangedSinceLastSave(true);
+                    fireAttributeContainerRemoved((Group) evt.getNewValue());
+                } else if ("neuronArrayAdded".equals(evt.getPropertyName())) {
+                }
             }
+        );
 
-            public void neuronChanged(NetworkEvent<Neuron> e) {
-                setChangedSinceLastSave(true);
-                fireAttributeContainerChanged(e.getObject());
-            }
-
-            public void labelChanged(NetworkEvent<Neuron> e) {
-                setChangedSinceLastSave(true);
-            }
-        });
-
-        network.addSynapseListener(new SynapseListener() {
-            public void synapseAdded(NetworkEvent<Synapse> networkEvent) {
-                setChangedSinceLastSave(true);
-                fireAttributeContainerAdded(networkEvent.getObject());
-            }
-
-            public void synapseChanged(NetworkEvent<Synapse> networkEvent) {
-                setChangedSinceLastSave(true);
-                fireAttributeContainerChanged(networkEvent.getObject());
-            }
-
-            public void synapseRemoved(NetworkEvent<Synapse> networkEvent) {
-                setChangedSinceLastSave(true);
-                fireAttributeContainerRemoved(networkEvent.getObject());
-            }
-
-            public void synapseTypeChanged(NetworkEvent<SynapseUpdateRule> networkEvent) {
-                setChangedSinceLastSave(true);
-                fireAttributeContainerChanged(networkEvent.getObject());
-            }
-        });
     }
 
     @Override
@@ -176,11 +157,6 @@ public final class NetworkComponent extends WorkspaceComponent {
         network.setOneOffRun(!running);
     }
 
-    /**
-     * Returns the root network.
-     *
-     * @return the root network
-     */
     public Network getNetwork() {
         return network;
     }
diff --git a/src/org/simbrain/network/connections/ConnectionStrategy.java b/src/org/simbrain/network/connections/ConnectionStrategy.java
index 0507615..2f6524e 100644
--- a/src/org/simbrain/network/connections/ConnectionStrategy.java
+++ b/src/org/simbrain/network/connections/ConnectionStrategy.java
@@ -95,7 +95,6 @@ public abstract class ConnectionStrategy implements EditableObject {
      */
     public abstract List<Synapse> connectNeurons(Network network, List<Neuron> source, List<Neuron> target);
 
-
     public boolean isUseExcitatoryRandomization() {
         return useExcitatoryRandomization;
     }
diff --git a/src/org/simbrain/network/core/Network.java b/src/org/simbrain/network/core/Network.java
index b0dd147..4b1d9ab 100755
--- a/src/org/simbrain/network/core/Network.java
+++ b/src/org/simbrain/network/core/Network.java
@@ -23,7 +23,6 @@ import org.simbrain.network.groups.Group;
 import org.simbrain.network.groups.NeuronGroup;
 import org.simbrain.network.groups.Subnetwork;
 import org.simbrain.network.groups.SynapseGroup;
-import org.simbrain.network.listeners.*;
 import org.simbrain.network.neuron_update_rules.interfaces.BiasedUpdateRule;
 import org.simbrain.util.SimbrainConstants.Polarity;
 import org.simbrain.util.SimbrainPreferences;
@@ -128,31 +127,6 @@ public class Network {
     private TimeType timeType = TimeType.DISCRETE;
 
     /**
-     * List of objects registered to observe general network events.
-     */
-    private transient List<NetworkListener> networkListeners = new ArrayList<NetworkListener>();
-
-    /**
-     * List of objects registered to observe neuron-related network events.
-     */
-    private transient List<NeuronListener> neuronListeners = new ArrayList<NeuronListener>();
-
-    /**
-     * List of objects registered to observe synapse-related network events.
-     */
-    private transient List<SynapseListener> synapseListeners = new ArrayList<SynapseListener>();
-
-    /**
-     * List of objects registered to observe group-related network events.
-     */
-    private transient List<GroupListener> groupListeners = new ArrayList<GroupListener>();
-
-    /**
-     * List of objects registered to observe text-related network events.
-     */
-    private transient List<TextListener> textListeners = new ArrayList<TextListener>();
-
-    /**
      * Whether network has been updated yet; used by thread.
      */
     private transient AtomicBoolean updateCompleted = new AtomicBoolean(false);
@@ -237,25 +211,18 @@ public class Network {
      * bounds.
      */
     public void update() {
-        networkListeners.forEach(l -> l.setUpdateComplete(false));
+
+        changeSupport.firePropertyChange("updatedCompleted", null, false);
+
+        // Main update
         updateManager.invokeAllUpdates();
 
-        if (fireUpdates) {
-            // Fire update events for GUI update. Loose items, then groups.
-            // Todo: fireSynapsesUpdated(synapseList) is a performance drain,
-            // but needed e.g. to view Hebbian dynamics
-            fireSynapsesUpdated(looseSynapses); // Loose synapses
-            fireNeuronsUpdated(looseNeurons); // Loose neurons
-            for (Group group : groupList) {
-                fireGroupUpdated(group);
-            }
-        }
-        // Clear input nodes
         clearInputs();
-        // Update Time
         updateTime();
+        changeSupport.firePropertyChange("updateTimeDisplay", null, false);
         iterCount++;
         setUpdateCompleted(true);
+
     }
 
     /**
@@ -570,7 +537,7 @@ public class Network {
 
         // Notify listeners that this neuron has been deleted
         if(fireEvent) {
-            fireNeuronRemoved(toDelete);
+            changeSupport.firePropertyChange("neuronRemoved", toDelete, null);
         }
     }
 
@@ -667,7 +634,8 @@ public class Network {
                 ((BiasedUpdateRule) neuron.getUpdateRule()).setBias(0);
             }
         }
-        fireNeuronsUpdated(getFlatNeuronList());
+        changeSupport.firePropertyChange("neuronsUpdated", null, this.getFlatNeuronList());
+
     }
 
     /**
@@ -677,9 +645,9 @@ public class Network {
      */
     public void setActivations(final double value) {
         for (Neuron neuron : this.getFlatNeuronList()) {
+            //TODO
             neuron.setActivation(value);
         }
-        fireNeuronsUpdated(getFlatNeuronList());
     }
 
     /**
@@ -1016,13 +984,6 @@ public class Network {
 
         changeSupport = new PropertyChangeSupport(this);
 
-        // Initialize listener lists
-        networkListeners = new ArrayList<NetworkListener>();
-        neuronListeners = new ArrayList<NeuronListener>();
-        synapseListeners = new ArrayList<SynapseListener>();
-        textListeners = new ArrayList<TextListener>();
-        groupListeners = new ArrayList<GroupListener>();
-
         // Initialize update manager
         updateManager.postUnmarshallingInit();
 
@@ -1187,14 +1148,12 @@ public class Network {
     }
 
     /**
-     * Fire a neuron deleted event to all registered model listeners.
+     * Fire a neuron added event to all registered model listeners.
      *
-     * @param deleted neuron which has been deleted
+     * @param added neuron which was added
      */
-    public void fireNeuronRemoved(final Neuron deleted) {
-        for (NeuronListener listener : neuronListeners) {
-            listener.neuronRemoved(new NetworkEvent<Neuron>(this, deleted));
-        }
+    public void fireNeuronAdded(final Neuron added) {
+        changeSupport.firePropertyChange("neuronAdded", null, added);
     }
 
     /**
@@ -1202,9 +1161,7 @@ public class Network {
      * has been changed and this should be reflected in the GUI.
      */
     public void fireNeuronsUpdated() {
-        for (NetworkListener listener : networkListeners) {
-            listener.updateNeurons();
-        }
+        changeSupport.firePropertyChange("neuronsUpdated", null, getNeuronList());
     }
 
     /**
@@ -1215,88 +1172,7 @@ public class Network {
      * @param neurons the neurons whose state has changed
      */
     public void fireNeuronsUpdated(Collection<Neuron> neurons) {
-        for (int i = 0, n = networkListeners.size(); i < n; i++) {
-            networkListeners.get(i).updateNeurons(neurons);
-        }
-    }
-
-    /**
-     * Fire this event when the visible state of a synapse (e.g. its strength)
-     * has been changed and this should be reflected in the GUI.
-     */
-    public void fireSynapsesUpdated() {
-        for (NetworkListener listener : networkListeners) {
-            listener.updateSynapses();
-        }
-    }
-
-    /**
-     * Fire this event when the visible state of a specified list of synapses
-     * (e.g. their strengths) has been changed and this should be reflected in
-     * the GUI.
-     *
-     * @param synapses the synapses whose state has changed
-     */
-    public void fireSynapsesUpdated(Collection<Synapse> synapses) {
-        for (int i = 0, n = networkListeners.size(); i < n; i++) {
-            networkListeners.get(i).updateSynapses(synapses);
-        }
-    }
-
-    /**
-     * Fire a network changed event to all registered model listeners.
-     *
-     * @param moved Neuron that has been moved
-     */
-    public void fireNeuronMoved(final Neuron moved) {
-        for (NeuronListener listener : neuronListeners) {
-            listener.neuronMoved(new NetworkEvent<Neuron>(this, moved));
-        }
-    }
-
-    /**
-     * Fire a neuron added event to all registered model listeners.
-     *
-     * @param added neuron which was added
-     */
-    public void fireNeuronAdded(final Neuron added) {
-        for (NeuronListener listener : neuronListeners) {
-            listener.neuronAdded(new NetworkEvent<Neuron>(this, added));
-        }
-    }
-
-    /**
-     * Fire a neuron type changed event to all registered model listeners.
-     *
-     * @param old     the old update rule
-     * @param changed the new update rule
-     */
-    public void fireNeuronTypeChanged(final NeuronUpdateRule old, final NeuronUpdateRule changed) {
-        for (NeuronListener listener : neuronListeners) {
-            listener.neuronTypeChanged(new NetworkEvent<NeuronUpdateRule>(this, old, changed));
-        }
-    }
-
-    /**
-     * Fire a neuron changed event to all registered model listeners.
-     *
-     * @param changed neuron
-     */
-    public void fireNeuronChanged(final Neuron changed) {
-        for (NeuronListener listener : neuronListeners) {
-            listener.neuronChanged(new NetworkEvent<Neuron>(this, changed));
-        }
-    }
-
-    /**
-     * Fire a label changed event to all registered model listeners.
-     *
-     * @param changed neuron
-     */
-    public void fireNeuronLabelChanged(final Neuron changed) {
-        for (NeuronListener listener : neuronListeners) {
-            listener.labelChanged(new NetworkEvent<Neuron>(this, changed));
-        }
+        changeSupport.firePropertyChange("neuronsUpdated", null, neurons);
     }
 
     /**
@@ -1305,9 +1181,7 @@ public class Network {
      * @param added synapse which was added
      */
     public void fireSynapseAdded(final Synapse added) {
-        for (SynapseListener listener : synapseListeners) {
-            listener.synapseAdded(new NetworkEvent<Synapse>(this, added));
-        }
+        changeSupport.firePropertyChange("synapseAdded", null, added);
     }
 
     /**
@@ -1316,32 +1190,25 @@ public class Network {
      * @param deleted synapse which was deleted
      */
     public void fireSynapseRemoved(final Synapse deleted) {
-        for (SynapseListener listener : synapseListeners) {
-            listener.synapseRemoved(new NetworkEvent<Synapse>(this, deleted));
-        }
+        changeSupport.firePropertyChange("synapseRemoved", deleted, null);
     }
-
     /**
-     * Fire a synapse changed event to all registered model listeners.
-     *
-     * @param changed new, changed synapse
+     * Fire this event when the visible state of a synapse (e.g. its strength)
+     * has been changed and this should be reflected in the GUI.
      */
-    public void fireSynapseChanged(final Synapse changed) {
-        for (SynapseListener listener : synapseListeners) {
-            listener.synapseChanged(new NetworkEvent<Synapse>(this, changed));
-        }
+    public void fireSynapsesUpdated() {
+        changeSupport.firePropertyChange("synapsesUpdated", null, getSynapseList());
     }
 
     /**
-     * Fire a synapse type changed event to all registered model listeners.
+     * Fire this event when the visible state of a specified list of synapses
+     * (e.g. their strengths) has been changed and this should be reflected in
+     * the GUI.
      *
-     * @param oldRule      old synapse, before the change
-     * @param learningRule new, changed synapse
+     * @param synapses the synapses whose state has changed
      */
-    public void fireSynapseTypeChanged(final SynapseUpdateRule oldRule, final SynapseUpdateRule learningRule) {
-        for (SynapseListener listener : synapseListeners) {
-            listener.synapseTypeChanged(new NetworkEvent<SynapseUpdateRule>(this, oldRule, learningRule));
-        }
+    public void fireSynapsesUpdated(Collection<Synapse> synapses) {
+        changeSupport.firePropertyChange("synapsesUpdated", null, synapses);
     }
 
     /**
@@ -1350,9 +1217,7 @@ public class Network {
      * @param added text which was deleted
      */
     public void fireTextAdded(final NetworkTextObject added) {
-        for (TextListener listener : textListeners) {
-            listener.textAdded(added);
-        }
+        changeSupport.firePropertyChange("textAdded", null, added);
     }
 
     /**
@@ -1361,42 +1226,7 @@ public class Network {
      * @param deleted text which was deleted
      */
     public void fireTextRemoved(final NetworkTextObject deleted) {
-        for (TextListener listener : textListeners) {
-            listener.textRemoved(deleted);
-        }
-    }
-
-    /**
-     * Fire a text changed event to all registered model listeners.
-     * <p>
-     * TODO: Not currently used.
-     *
-     * @param changed text which was changed
-     */
-    public void fireTextChanged(final NetworkTextObject changed) {
-        for (TextListener listener : textListeners) {
-            listener.textRemoved(changed);
-        }
-    }
-
-    /**
-     * Used by Network thread to ensure that an update cycle is complete before
-     * updating again.
-     *
-     * @return whether the network has been updated or not
-     */
-    public boolean isUpdateCompleted() {
-        return updateCompleted.get();
-    }
-
-    /**
-     * Used by Network thread to ensure that an update cycle is complete before
-     * updating again.
-     *
-     * @param b whether the network has been updated or not.
-     */
-    public void setUpdateCompleted(final boolean b) {
-        updateCompleted.set(b);
+        changeSupport.firePropertyChange("textRemoved", deleted, null);
     }
 
     /**
@@ -1405,9 +1235,7 @@ public class Network {
      * @param added Group that has been added
      */
     public void fireGroupAdded(final Group added) {
-        for (GroupListener listener : groupListeners) {
-            listener.groupAdded(new NetworkEvent<Group>(this, added));
-        }
+        changeSupport.firePropertyChange("groupAdded", null, added);
     }
 
     /**
@@ -1416,70 +1244,27 @@ public class Network {
      * @param deleted Group to be deleted
      */
     public void fireGroupRemoved(final Group deleted) {
-        for (GroupListener listener : groupListeners) {
-            listener.groupRemoved(new NetworkEvent<Group>(this, deleted));
-        }
-    }
-
-    /**
-     * Fire a group changed event to all registered model listeners. A string
-     * desription describes the change and is used by listeners to handle the
-     * event. Old group is not currently used but may be in the future.
-     *
-     * @param old               Old group
-     * @param changed           New changed group
-     * @param changeDescription A description of the
-     */
-    public void fireGroupChanged(final Group old, final Group changed, final String changeDescription) {
-        for (GroupListener listener : groupListeners) {
-            listener.groupChanged(new NetworkEvent<Group>(this, old, changed), changeDescription);
-        }
-    }
-
-    /**
-     * This version of fireGroupChanged fires a pre-set event, which may have an
-     * auxiliary object set.
-     *
-     * @param event             the network changed event.
-     * @param changeDescription A description of the
-     */
-    public void fireGroupChanged(final NetworkEvent<Group> event, final String changeDescription) {
-        for (GroupListener listener : groupListeners) {
-            listener.groupChanged(event, changeDescription);
-        }
-    }
-
-    /**
-     * @param group             reference to the group whose parameters are
-     *                          being changed
-     * @param changeDescription A change of description for the group
-     */
-    public void fireGroupChanged(final Group group, final String changeDescription) {
-        for (GroupListener listener : groupListeners) {
-            listener.groupChanged(new NetworkEvent<Group>(this, group), changeDescription);
-        }
+        changeSupport.firePropertyChange("groupRemoved", deleted, null);
     }
 
     /**
-     * Fire a group parameters changed event.
+     * Used by Network thread to ensure that an update cycle is complete before
+     * updating again.
      *
-     * @param group reference to group whose parameters changed
+     * @return whether the network has been updated or not
      */
-    public void fireGroupParametersChanged(final Group group) {
-        for (GroupListener listener : groupListeners) {
-            listener.groupParameterChanged(new NetworkEvent<Group>(this, group, group));
-        }
+    public boolean isUpdateCompleted() {
+        return updateCompleted.get();
     }
 
     /**
-     * Fire a group update event event.
+     * Used by Network thread to ensure that an update cycle is complete before
+     * updating again.
      *
-     * @param group reference to group that has been updated.
+     * @param b whether the network has been updated or not.
      */
-    public void fireGroupUpdated(final Group group) {
-        for (int i = 0, n = groupListeners.size(); i < n; i++) {
-            groupListeners.get(i).groupUpdated(group);
-        }
+    public void setUpdateCompleted(final boolean b) {
+        updateCompleted.set(b);
     }
 
     @Override
@@ -1530,78 +1315,6 @@ public class Network {
     }
 
     /**
-     * Register a network listener.
-     *
-     * @param listener the observer to register
-     */
-    public void addNetworkListener(final NetworkListener listener) {
-        networkListeners.add(listener);
-    }
-
-    /**
-     * Remove a network listener.
-     *
-     * @param networkListener the observer to remove
-     */
-    public void removeNetworkListener(NetworkListener networkListener) {
-        networkListeners.remove(networkListener);
-    }
-
-    /**
-     * Register a neuron listener.
-     *
-     * @param listener the observer to register
-     */
-    public void addNeuronListener(final NeuronListener listener) {
-        neuronListeners.add(listener);
-    }
-
-    /**
-     * Register a synapse listener.
-     *
-     * @param listener the observer to register
-     */
-    public void addSynapseListener(final SynapseListener listener) {
-        synapseListeners.add(listener);
-    }
-
-    /**
-     * Register a text listener.
-     *
-     * @param listener the observer to register
-     */
-    public void addTextListener(final TextListener listener) {
-        textListeners.add(listener);
-    }
-
-    /**
-     * Remove a synapse listener.
-     *
-     * @param synapseListener the observer to remove
-     */
-    public void removeSynapseListener(SynapseListener synapseListener) {
-        synapseListeners.remove(synapseListener);
-    }
-
-    /**
-     * Register a group listener.
-     *
-     * @param listener the observer to register
-     */
-    public void addGroupListener(final GroupListener listener) {
-        groupListeners.add(listener);
-    }
-
-    /**
-     * Remove a group listener.
-     *
-     * @param listener the observer to remove
-     */
-    public void removeGroupListener(final GroupListener listener) {
-        groupListeners.remove(listener);
-    }
-
-    /**
      * Search for a neuron by label. If there are more than one with the same
      * label only the first one found is returned.
      *
@@ -1728,7 +1441,6 @@ public class Network {
      * @param connection conection object
      */
     public void connectNeuronGroups(final NeuronGroup sng, final NeuronGroup tng, final ConnectionStrategy connection) {
-
         final SynapseGroup group = SynapseGroup.createSynapseGroup(sng, tng, connection);
         addGroup(group);
     }
@@ -1839,7 +1551,6 @@ public class Network {
         return oneOffRun;
     }
 
-
     public void addPropertyChangeListener(PropertyChangeListener listener) {
         changeSupport.addPropertyChangeListener(listener);
     }
diff --git a/src/org/simbrain/network/core/NetworkTextObject.java b/src/org/simbrain/network/core/NetworkTextObject.java
index ac42ded..621eccb 100644
--- a/src/org/simbrain/network/core/NetworkTextObject.java
+++ b/src/org/simbrain/network/core/NetworkTextObject.java
@@ -18,6 +18,9 @@
  */
 package org.simbrain.network.core;
 
+import java.beans.PropertyChangeListener;
+import java.beans.PropertyChangeSupport;
+
 /**
  * <b>NetworkTextObject</b> is a string of text in a neural network, typically
  * used to label elements of a neural network simulation. Contains basic text
@@ -66,6 +69,11 @@ public class NetworkTextObject {
     private boolean bold;
 
     /**
+     * Support for property change events.
+     */
+    private transient PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);
+
+    /**
      * Construct the text object.
      *
      * @param parent root network
@@ -108,112 +116,78 @@ public class NetworkTextObject {
         this.italic = text.isItalic();
     }
 
-    /**
-     * @return the x
-     */
     public double getX() {
         return x;
     }
 
-    /**
-     * @param x the x to set
-     */
     public void setX(double x) {
         this.x = x;
     }
 
-    /**
-     * @return the y
-     */
     public double getY() {
         return y;
     }
 
-    /**
-     * @param y the y to set
-     */
     public void setY(double y) {
         this.y = y;
     }
 
-    /*
-     * (non-Javadoc)
-     *
-     * @see java.lang.Object#toString()
-     */
     @Override
     public String toString() {
         return "(" + Math.round(x) + "," + Math.round(y) + "):" + text;
     }
 
-    /**
-     * @return the text
-     */
     public String getText() {
         return text;
     }
 
-    /**
-     * @param text the text to set
-     */
     public void setText(String text) {
         this.text = text;
     }
 
-    /**
-     * @return the fontName
-     */
     public String getFontName() {
         return fontName;
     }
 
-    /**
-     * @param fontName the fontName to set
-     */
     public void setFontName(String fontName) {
         this.fontName = fontName;
     }
 
-    /**
-     * @return the fontSize
-     */
     public int getFontSize() {
         return fontSize;
     }
 
-    /**
-     * @param fontSize the fontSize to set
-     */
     public void setFontSize(int fontSize) {
         this.fontSize = fontSize;
     }
 
-    /**
-     * @return the italic
-     */
     public boolean isItalic() {
         return italic;
     }
 
-    /**
-     * @param italic the italic to set
-     */
     public void setItalic(boolean italic) {
         this.italic = italic;
     }
 
-    /**
-     * @return the bold
-     */
     public boolean isBold() {
         return bold;
     }
 
-    /**
-     * @param bold the bold to set
-     */
     public void setBold(boolean bold) {
         this.bold = bold;
     }
 
+
+    public void addPropertyChangeListener(PropertyChangeListener listener) {
+        changeSupport.addPropertyChangeListener(listener);
+    }
+
+    public void removePropertyChangeListener(PropertyChangeListener listener) {
+        changeSupport.removePropertyChangeListener(listener);
+    }
+
+    //TODO (and for other delets)
+    public void delete() {
+        changeSupport.firePropertyChange("delete", this, null);
+    }
 }
diff --git a/src/org/simbrain/network/core/NetworkUpdateManager.java b/src/org/simbrain/network/core/NetworkUpdateManager.java
index 7754790..9d68153 100644
--- a/src/org/simbrain/network/core/NetworkUpdateManager.java
+++ b/src/org/simbrain/network/core/NetworkUpdateManager.java
@@ -19,10 +19,10 @@
 package org.simbrain.network.core;
 
 import org.simbrain.network.groups.Group;
-import org.simbrain.network.listeners.GroupAdapter;
-import org.simbrain.network.listeners.NetworkEvent;
 import org.simbrain.network.update_actions.*;
 
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
@@ -115,23 +115,23 @@ public class NetworkUpdateManager {
 
     /**
      * Update manager listen for relevant changes in network. In particular
-     * group update actions are added or removed as groups are added or removed.
+     * group update actions are added or removed as groups are added or
+     * removed.
      */
     private void addListeners() {
-        network.addGroupListener(new GroupAdapter() {
-
-            public void groupAdded(NetworkEvent<Group> e) {
-                if (e.getObject().isTopLevelGroup()) {
-                    addAction(new UpdateGroup(e.getObject()));
+        network.addPropertyChangeListener(
+            evt -> {
+                if ("groupAdded".equals(evt.getPropertyName())) {
+                    Group group = (Group) evt.getNewValue();
+                    if (group.isTopLevelGroup()) {
+                        addAction(new UpdateGroup(group));
+                    }
+                } else if ("groupRemoved".equals(evt.getPropertyName())) {
+                    Group group = (Group) evt.getNewValue();
+                    removeGroupAction(group);
                 }
-            }
-
-            public void groupRemoved(NetworkEvent<Group> e) {
-                // Find corresponding group update action and remove it
-                removeGroupAction(e.getObject());
-            }
+            });
 
-        });
     }
 
     /**
diff --git a/src/org/simbrain/network/core/Neuron.java b/src/org/simbrain/network/core/Neuron.java
index e961e62..0e27411 100755
--- a/src/org/simbrain/network/core/Neuron.java
+++ b/src/org/simbrain/network/core/Neuron.java
@@ -32,6 +32,8 @@ import org.simbrain.workspace.Producible;
 
 import java.awt.*;
 import java.awt.geom.Point2D;
+import java.beans.PropertyChangeListener;
+import java.beans.PropertyChangeSupport;
 import java.util.*;
 import java.util.List;
 import java.util.stream.Collectors;
@@ -205,6 +207,11 @@ public class Neuron implements EditableObject, AttributeContainer {
     private double auxValue;
 
     /**
+     * Support for property change events.
+     */
+    private transient PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);
+
+    /**
      * Construct a neuron with all default values in the specified network.
      * Sometimes used as the basis for a template neuron which will be edited
      * and then copied. Also used in scripts.
@@ -345,7 +352,7 @@ public class Neuron implements EditableObject, AttributeContainer {
 
         if (getNetwork() != null) {
             getNetwork().updateTimeType();
-            getNetwork().fireNeuronTypeChanged(oldRule, updateRule);
+            changeSupport.firePropertyChange("updateRule", oldRule, updateRule);
         }
     }
 
@@ -375,6 +382,7 @@ public class Neuron implements EditableObject, AttributeContainer {
         } else {
             activation = act;
         }
+        changeSupport.firePropertyChange("activation", lastActivation, act);
     }
 
     /**
@@ -400,28 +408,18 @@ public class Neuron implements EditableObject, AttributeContainer {
     public void forceSetActivation(final double act) {
         lastActivation = getActivation();
         activation = act;
+        changeSupport.firePropertyChange("activation", lastActivation, act);
     }
 
-    /**
-     * @return the level of activation.
-     */
     @Producible(idMethod = "getId")
     public double getActivation() {
         return activation;
     }
 
-    /**
-     * @return ID of neuron.
-     */
     public String getId() {
         return id;
     }
 
-    /**
-     * Sets the id of the neuron.
-     *
-     * @param theName Neuron id
-     */
     public void setId(final String theName) {
         id = theName;
     }
@@ -623,7 +621,6 @@ public class Neuron implements EditableObject, AttributeContainer {
      */
     public void randomize() {
         forceSetActivation(this.getUpdateRule().getRandomValue());
-        getNetwork().fireNeuronChanged(this);
     }
 
     /**
@@ -775,57 +772,31 @@ public class Neuron implements EditableObject, AttributeContainer {
         return (fanIn.contains(s) || fanOut.get(s.getTarget()) != null);
     }
 
-    /**
-     * @return Returns the x coordinate.
-     */
     public double getX() {
         return x;
     }
 
-    /**
-     * @return Returns the y coordinate.
-     */
     public double getY() {
         return y;
     }
 
-    /**
-     * @return Returns the z coordinate.
-     */
     public double getZ() {
         return z;
     }
 
-    /**
-     * @param x The x coordinate to set.
-     */
     public void setX(final double x) {
+        //changeSupport.firePropertyChange("moved", this.x, x);
         this.x = x;
-        if (this.getNetwork() != null) {
-            if (this.getNetwork() != null) {
-                this.getNetwork().fireNeuronMoved(this);
-            }
-        }
     }
 
-    /**
-     * @param y The y coordinate to set.
-     */
     public void setY(final double y) {
+        //changeSupport.firePropertyChange("moved", this.y, y);
         this.y = y;
-        if (this.getNetwork() != null) {
-            this.getNetwork().fireNeuronMoved(this);
-        }
     }
 
-    /**
-     * @param z The z coordinate to set.
-     */
     public void setZ(final double z) {
+        //changeSupport.firePropertyChange("moved", this.z, z);
         this.z = z;
-        if (this.getNetwork() != null) {
-            this.getNetwork().fireNeuronMoved(this);
-        }
     }
 
     /**
@@ -939,18 +910,10 @@ public class Neuron implements EditableObject, AttributeContainer {
         return updateRule.getToolTipText(this);
     }
 
-    /**
-     * @return the targetValue
-     */
     public double getTargetValue() {
         return targetValue;
     }
 
-    /**
-     * Set target value.
-     *
-     * @param targetValue value to set.
-     */
     public void setTargetValue(final double targetValue) {
         this.targetValue = targetValue;
     }
@@ -974,9 +937,6 @@ public class Neuron implements EditableObject, AttributeContainer {
         }
     }
 
-    /**
-     * @return the clamped
-     */
     public boolean isClamped() {
         return clamped;
     }
@@ -988,7 +948,7 @@ public class Neuron implements EditableObject, AttributeContainer {
      */
     public void setClamped(final boolean clamped) {
         this.clamped = clamped;
-        this.getNetwork().fireNeuronChanged(this);
+        changeSupport.firePropertyChange("clamped", null, clamped);
     }
 
     @Producible(idMethod = "getId", defaultVisibility = false)
@@ -998,8 +958,8 @@ public class Neuron implements EditableObject, AttributeContainer {
 
     @Consumable(idMethod = "getId", defaultVisibility = false)
     public void setLabel(final String label) {
+        changeSupport.firePropertyChange("label", this.label , label);
         this.label = label;
-        this.getNetwork().fireNeuronLabelChanged(this);
     }
 
     /**
@@ -1067,16 +1027,11 @@ public class Neuron implements EditableObject, AttributeContainer {
 
     /**
      * TODO: Possibly make this be a NeuronGroup. See design notes.
-     *
-     * @return the parentGroup
      */
     public Group getParentGroup() {
         return parentGroup;
     }
 
-    /**
-     * @param parentGroup the parentGroup to set
-     */
     public void setParentGroup(Group parentGroup) {
         this.parentGroup = parentGroup;
     }
@@ -1244,4 +1199,22 @@ public class Neuron implements EditableObject, AttributeContainer {
     public String getName() {
         return getId();
     }
+
+    public void delete() {
+        changeSupport.firePropertyChange("delete", this, null);
+    }
+
+    public void addPropertyChangeListener(PropertyChangeListener listener) {
+        changeSupport.addPropertyChangeListener(listener);
+    }
+
+    public void removePropertyChangeListener(PropertyChangeListener listener) {
+        changeSupport.removePropertyChangeListener(listener);
+    }
+
+    public void fireChanged() {
+        // TODO: Separate these, rename, etc
+        changeSupport.firePropertyChange("activation", null, null);
+        changeSupport.firePropertyChange("moved", null, null);
+    }
 }
diff --git a/src/org/simbrain/network/core/NeuronUpdateRule.java b/src/org/simbrain/network/core/NeuronUpdateRule.java
index ea91f94..bfe2796 100644
--- a/src/org/simbrain/network/core/NeuronUpdateRule.java
+++ b/src/org/simbrain/network/core/NeuronUpdateRule.java
@@ -89,7 +89,6 @@ public abstract class NeuronUpdateRule implements CopyableObject, AttributeConta
      */
     public final void incrementActivation(Neuron n) {
         n.forceSetActivation(n.getActivation() + n.getIncrement());
-        n.getNetwork().fireNeuronChanged(n);
     }
 
     /**
@@ -99,7 +98,6 @@ public abstract class NeuronUpdateRule implements CopyableObject, AttributeConta
      */
     public final void decrementActivation(Neuron n) {
         n.forceSetActivation(n.getActivation() - n.getIncrement());
-        n.getNetwork().fireNeuronChanged(n);
     }
 
     /**
diff --git a/src/org/simbrain/network/core/Synapse.java b/src/org/simbrain/network/core/Synapse.java
index 255cab5..a6d486c 100755
--- a/src/org/simbrain/network/core/Synapse.java
+++ b/src/org/simbrain/network/core/Synapse.java
@@ -30,6 +30,8 @@ import org.simbrain.workspace.AttributeContainer;
 import org.simbrain.workspace.Consumable;
 import org.simbrain.workspace.Producible;
 
+import java.beans.PropertyChangeListener;
+import java.beans.PropertyChangeSupport;
 import java.nio.ByteBuffer;
 import java.util.*;
 
@@ -67,7 +69,7 @@ public class Synapse implements EditableObject, AttributeContainer {
     /**
      * Strength of synapse.
      */
-    @UserParameter(label = "Strength", description = "Weight Strength", minimumValue = -10, maximumValue = 10, order = 1)
+    @UserParameter(label = "Strength", useSetter =  true, description = "Weight Strength", minimumValue = -10, maximumValue = 10, order = 1)
     private double strength = 0;
 
     @Override
@@ -197,6 +199,11 @@ public class Synapse implements EditableObject, AttributeContainer {
      */
     private final boolean isTemplate;
 
+    /**
+     * Support for property change events.
+     */
+    private transient PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);
+
     /** Initialize properties */
     static {
         Properties properties = Utils.getSimbrainProperties();
@@ -488,7 +495,7 @@ public class Synapse implements EditableObject, AttributeContainer {
             return;
         }
         if (!isFrozen()) {
-            strength = clip(source.getPolarity().clip(wt));
+            forceSetStrength(clip(source.getPolarity().clip(wt)));
         }
     }
 
@@ -496,7 +503,9 @@ public class Synapse implements EditableObject, AttributeContainer {
      * @param wt the value to set the strength of the synapse to
      */
     public void forceSetStrength(final double wt) {
+        double oldweight = strength;
         strength = wt;
+        changeSupport.firePropertyChange("strength", oldweight, strength);
     }
 
     /**
@@ -552,11 +561,8 @@ public class Synapse implements EditableObject, AttributeContainer {
      */
     public void incrementWeight() {
         if (strength < upperBound) {
-            strength += increment;
+            forceSetStrength(strength + increment);
         }
-        // target.weightChanged(this); // Maybe?
-        if (getNetwork() != null && !isTemplate)
-            getNetwork().fireSynapseChanged(this);
     }
 
     /**
@@ -564,10 +570,9 @@ public class Synapse implements EditableObject, AttributeContainer {
      */
     public void decrementWeight() {
         if (strength > lowerBound) {
+            forceSetStrength(strength - increment);
             strength -= increment;
         }
-        if (getNetwork() != null && !isTemplate)
-            getNetwork().fireSynapseChanged(this);
     }
 
     /**
@@ -579,10 +584,8 @@ public class Synapse implements EditableObject, AttributeContainer {
         } else if (strength < 0) {
             decrementWeight();
         } else if (strength == 0) {
-            strength = 0;
+            forceSetStrength(0);
         }
-        if (getNetwork() != null && !isTemplate)
-            getNetwork().fireSynapseChanged(this);
     }
 
     /**
@@ -594,10 +597,8 @@ public class Synapse implements EditableObject, AttributeContainer {
         } else if (strength < 0) {
             incrementWeight();
         } else if (strength == 0) {
-            strength = 0;
+            forceSetStrength(0);
         }
-        if (getNetwork() != null && !isTemplate)
-            getNetwork().fireSynapseChanged(this);
     }
 
     /**
@@ -611,8 +612,6 @@ public class Synapse implements EditableObject, AttributeContainer {
         if (symmetric != null) {
             symmetric.setStrength(strength);
         }
-        if (getNetwork() != null && !isTemplate)
-            getNetwork().fireSynapseChanged(this);
     }
 
     /**
@@ -637,9 +636,8 @@ public class Synapse implements EditableObject, AttributeContainer {
      * Randomize this weight to a value between its upper and lower bounds.
      */
     public void randomize() {
-        strength = (getUpperBound() - getLowerBound()) * Math.random() + getLowerBound();
-        if (getNetwork() != null && !isTemplate)
-            getNetwork().fireSynapseChanged(this);
+        double newStrength = (getUpperBound() - getLowerBound()) * Math.random() + getLowerBound();
+        forceSetStrength(newStrength);
     }
 
     /**
@@ -863,11 +861,7 @@ public class Synapse implements EditableObject, AttributeContainer {
         SynapseUpdateRule oldRule = learningRule;
         this.learningRule = newLearningRule;
         initSpikeResponder();
-        if (parentNetwork != null) {
-            getNetwork().fireSynapseTypeChanged(oldRule, learningRule);
-            // getNetwork().Network.updateTimeType();
-            // Currently synapses don't have a time type
-        }
+        changeSupport.firePropertyChange("rule", oldRule, newLearningRule);
     }
 
     /**
@@ -1065,4 +1059,21 @@ public class Synapse implements EditableObject, AttributeContainer {
         }
     }
 
+    public void addPropertyChangeListener(PropertyChangeListener listener) {
+        changeSupport.addPropertyChangeListener(listener);
+    }
+
+    public void removePropertyChangeListener(PropertyChangeListener listener) {
+        changeSupport.removePropertyChangeListener(listener);
+    }
+
+    //TODO. rename fireDelete?
+    public void delete() {
+        changeSupport.firePropertyChange("delete", this, null);
+    }
+    // TODO. Rename.  Fire strength update
+    public void fireUpdate() {
+        // The strength event calls the right updates for now
+        changeSupport.firePropertyChange("strength", this, null);
+    }
 }
diff --git a/src/org/simbrain/network/groups/Group.java b/src/org/simbrain/network/groups/Group.java
index eb2bbe7..ab9fb25 100644
--- a/src/org/simbrain/network/groups/Group.java
+++ b/src/org/simbrain/network/groups/Group.java
@@ -25,6 +25,9 @@ import org.simbrain.workspace.AttributeContainer;
 import org.simbrain.workspace.Consumable;
 import org.simbrain.workspace.Producible;
 
+import java.beans.PropertyChangeListener;
+import java.beans.PropertyChangeSupport;
+
 /**
  * <b>Group</b>: a logical group of neurons and / or synapses. Its gui
  * representation is {@link org.simbrain.network.gui.nodes.GroupNode}.
@@ -67,6 +70,11 @@ public abstract class Group implements CopyableObject, AttributeContainer {
     private Group parentGroup;
 
     /**
+     * Support for property change events.
+     */
+    protected transient PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);
+
+    /**
      * Construct a model group with a reference to its root network.
      *
      * @param net reference to root network.
@@ -133,36 +141,22 @@ public abstract class Group implements CopyableObject, AttributeContainer {
 
     @Consumable(idMethod = "getId", defaultVisibility = false)
     public void setLabel(String label) {
+        changeSupport.firePropertyChange("label", this.label , label);
         this.label = label;
-        if (parentNetwork != null) {
-            parentNetwork.fireGroupParametersChanged(this);
-        }
     }
 
-    /**
-     * @return the stateInfo
-     */
     public String getStateInfo() {
         return stateInfo;
     }
 
-    /**
-     * @param stateInfo the stateInfo to set
-     */
     public void setStateInfo(String stateInfo) {
         this.stateInfo = stateInfo;
     }
 
-    /**
-     * @return the parentGroup
-     */
     public Group getParentGroup() {
         return parentGroup;
     }
 
-    /**
-     * @param parentGroup the parentGroup to set
-     */
     protected void setParentGroup(Group parentGroup) {
         this.parentGroup = parentGroup;
     }
@@ -195,16 +189,10 @@ public abstract class Group implements CopyableObject, AttributeContainer {
         }
     }
 
-    /**
-     * @return the markedForDeletion
-     */
     public boolean isMarkedForDeletion() {
         return markedForDeletion;
     }
 
-    /**
-     * @param markedForDeletion the markedForDeletion to set
-     */
     protected void setMarkedForDeletion(boolean markedForDeletion) {
         this.markedForDeletion = markedForDeletion;
     }
@@ -215,11 +203,22 @@ public abstract class Group implements CopyableObject, AttributeContainer {
      * {@link Subnetwork} so that sub-groups also are given ids.
      */
     public void initializeId() {
-
         id = getParentNetwork().getGroupIdGenerator().getId();
-        // Create a default label based on the id
-        setLabel(id.replaceAll("_", " "));
+        if (label.isEmpty()) {
+            setLabel(id.replaceAll("_", " "));
+        }
+    }
+
+    public void addPropertyChangeListener(PropertyChangeListener listener) {
+        changeSupport.addPropertyChangeListener(listener);
+    }
 
+    public void removePropertyChangeListener(PropertyChangeListener listener) {
+        changeSupport.removePropertyChangeListener(listener);
     }
 
+    public void fireTextUpdated() {
+        changeSupport.firePropertyChange("label", this, null);
+
+    }
 }
\ No newline at end of file
diff --git a/src/org/simbrain/network/groups/NeuronGroup.java b/src/org/simbrain/network/groups/NeuronGroup.java
index f38bd74..3f19bb1 100644
--- a/src/org/simbrain/network/groups/NeuronGroup.java
+++ b/src/org/simbrain/network/groups/NeuronGroup.java
@@ -192,7 +192,7 @@ public class NeuronGroup extends Group implements CopyableGroup<NeuronGroup>  {
     /**
      * Construct a new neuron group with a specified number of neurons.
      *
-     * @param net        parent network
+     * @param net parent network
      * @param numNeurons how many neurons it will have
      */
     public NeuronGroup(final Network net, final int numNeurons) {
@@ -288,6 +288,7 @@ public class NeuronGroup extends Group implements CopyableGroup<NeuronGroup>  {
         stopRecording();
         neuronList.clear();
         Runtime.getRuntime().gc();
+        changeSupport.firePropertyChange("delete", this, null);
     }
 
     /**
@@ -310,6 +311,22 @@ public class NeuronGroup extends Group implements CopyableGroup<NeuronGroup>  {
         if (isRecording()) {
             writeActsToFile();
         }
+        fireLabelUpdated();
+    }
+
+    /**
+     * Label update needs to be reflected in GUI.
+     */
+    private void fireLabelUpdated() {
+        changeSupport.firePropertyChange("label", null , getLabel() + " input mode " + inputMode);
+    }
+
+    /**
+     * Node positions within group changed and GUI should be notified of this
+     * change.
+     */
+    public void firePositionChanged() {
+        changeSupport.firePropertyChange("moved", null, null);
     }
 
     /**
@@ -389,8 +406,7 @@ public class NeuronGroup extends Group implements CopyableGroup<NeuronGroup>  {
         } catch (IOException e) {
             e.printStackTrace();
         }
-        this.getParentNetwork().fireGroupParametersChanged(this);
-        this.getParentNetwork().fireGroupChanged(this, "Recording Started");
+        changeSupport.firePropertyChange("recordingStarted", null, null);
     }
 
     /**
@@ -402,8 +418,7 @@ public class NeuronGroup extends Group implements CopyableGroup<NeuronGroup>  {
             valueWriter = null;
         }
         recording = false;
-        this.getParentNetwork().fireGroupParametersChanged(this);
-        this.getParentNetwork().fireGroupChanged(this, "Recording Stopped");
+        changeSupport.firePropertyChange("recordingStopped", null, null);
     }
 
     /**
@@ -1041,6 +1056,7 @@ public class NeuronGroup extends Group implements CopyableGroup<NeuronGroup>  {
             neuron.setX(neuron.getX() + offsetX);
             neuron.setY(neuron.getY() + offsetY);
         }
+        firePositionChanged();
     }
 
     /**
@@ -1190,6 +1206,7 @@ public class NeuronGroup extends Group implements CopyableGroup<NeuronGroup>  {
     public void applyLayout() {
         layout.getLayout().setInitialLocation(getPosition());
         layout.getLayout().layoutNeurons(getNeuronList());
+        firePositionChanged();
     }
 
     /**
@@ -1201,6 +1218,7 @@ public class NeuronGroup extends Group implements CopyableGroup<NeuronGroup>  {
     public void applyLayout(Point2D initialPosition) {
         layout.getLayout().setInitialLocation(initialPosition);
         layout.getLayout().layoutNeurons(getNeuronList());
+        firePositionChanged();
     }
 
     public HashSet<SynapseGroup> getIncomingSgs() {
@@ -1475,7 +1493,7 @@ public class NeuronGroup extends Group implements CopyableGroup<NeuronGroup>  {
             throw new IllegalArgumentException("Cannot set input mode to true" + " if there is no input data stored in NeuronGroup field:" + " testData");
         }
         this.inputMode = inputMode;
-        this.getParentNetwork().fireGroupChanged(this, getLabel() + " input mode " + inputMode);
+        fireLabelUpdated();
     }
 
     public boolean isSpikingNeuronGroup() {
@@ -1615,4 +1633,5 @@ public class NeuronGroup extends Group implements CopyableGroup<NeuronGroup>  {
             subsamplingIndices = SimbrainMath.randPermute(0, neuronList.size());
         }
     }
+
 }
diff --git a/src/org/simbrain/network/groups/Subnetwork.java b/src/org/simbrain/network/groups/Subnetwork.java
index 437b215..73dc639 100644
--- a/src/org/simbrain/network/groups/Subnetwork.java
+++ b/src/org/simbrain/network/groups/Subnetwork.java
@@ -78,6 +78,7 @@ public abstract class Subnetwork extends Group {
         for (SynapseGroup synapseGroup : synapseGroupList) {
             getParentNetwork().removeGroup(synapseGroup);
         }
+        changeSupport.firePropertyChange("delete", this, null);
     }
 
     @Override
diff --git a/src/org/simbrain/network/groups/SynapseGroup.java b/src/org/simbrain/network/groups/SynapseGroup.java
index e0b290f..6c09f3d 100644
--- a/src/org/simbrain/network/groups/SynapseGroup.java
+++ b/src/org/simbrain/network/groups/SynapseGroup.java
@@ -524,6 +524,7 @@ public class SynapseGroup extends Group {
             sourceNeuronGroup.removeOutgoingSg(this);
         }
         Runtime.getRuntime().gc();
+        changeSupport.firePropertyChange("delete", this, null);
     }
 
     @Override
@@ -557,8 +558,7 @@ public class SynapseGroup extends Group {
 
     public void setDisplaySynapses(boolean displaySynapses) {
         this.displaySynapses = displaySynapses;
-        // getParentNetwork().fireGroupChanged(new NetworkEvent<Group>(getParentNetwork(), this, this),
-        //     SynapseGroupNode.SYNAPSE_VISIBILITY_CHANGED);
+        changeSupport.firePropertyChange("synapseVisibilityChanged", null, this);
     }
 
     public boolean isDisplaySynapses() {
@@ -580,7 +580,8 @@ public class SynapseGroup extends Group {
         if (isDisplaySynapses()) {
             toDelete.getNetwork().fireSynapseRemoved(toDelete);
         }
-        getParentNetwork().fireGroupChanged(this, this, "synapseRemoved");
+        // TODO
+        //getParentNetwork().fireGroupChanged(this, this, "synapseRemoved");
         if (isEmpty()) {
             delete();
         }
@@ -656,7 +657,8 @@ public class SynapseGroup extends Group {
      *                of this group.
      */
     public void addNewExcitatorySynapse(final Synapse synapse) {
-        getParentNetwork().fireGroupChanged(this, this, "synapseAdded");
+        //TODO
+        //getParentNetwork().fireGroupChanged(this, this, "synapseAdded");
         synapse.setId(getParentNetwork().getSynapseIdGenerator().getId());
         synapse.setParentGroup(this);
         if (exciteRand != null) {
@@ -681,7 +683,8 @@ public class SynapseGroup extends Group {
      *                of this group.
      */
     public void addNewInhibitorySynapse(final Synapse synapse) {
-        getParentNetwork().fireGroupChanged(this, this, "synapseAdded");
+        // TODO
+        //getParentNetwork().fireGroupChanged(this, this, "synapseAdded");
         synapse.setId(getParentNetwork().getSynapseIdGenerator().getId());
         synapse.setParentGroup(this);
         if (inhibRand != null) {
@@ -1787,4 +1790,5 @@ public class SynapseGroup extends Group {
     public EditableObject copy() {
         return this.copy();
     }
+
 }
\ No newline at end of file
diff --git a/src/org/simbrain/network/gui/KeyBindings.java b/src/org/simbrain/network/gui/KeyBindings.java
index fce7305..f6a426b 100644
--- a/src/org/simbrain/network/gui/KeyBindings.java
+++ b/src/org/simbrain/network/gui/KeyBindings.java
@@ -270,7 +270,6 @@ public class KeyBindings {
                     panel.getQuickConnector().applyCurrentConnection(panel.getNetwork(),
                             panel.getSourceModelNeurons(),
                             panel.getSelectedModelNeurons());
-                    panel.getNetwork().fireSynapsesUpdated();
                 }
             }
         });
diff --git a/src/org/simbrain/network/gui/NetworkPanel.java b/src/org/simbrain/network/gui/NetworkPanel.java
index 8d7bc0b..de6d076 100755
--- a/src/org/simbrain/network/gui/NetworkPanel.java
+++ b/src/org/simbrain/network/gui/NetworkPanel.java
@@ -51,7 +51,6 @@ import org.simbrain.network.gui.nodes.neuronGroupNodes.CompetitiveGroupNode;
 import org.simbrain.network.gui.nodes.neuronGroupNodes.SOMGroupNode;
 import org.simbrain.network.gui.nodes.subnetworkNodes.*;
 import org.simbrain.network.layouts.Layout;
-import org.simbrain.network.listeners.*;
 import org.simbrain.network.subnetworks.*;
 import org.simbrain.network.util.CopyPaste;
 import org.simbrain.network.util.SimnetUtils;
@@ -431,20 +430,11 @@ public class NetworkPanel extends JPanel {
         super.setLayout(new BorderLayout());
         this.add("North", toolbars);
 
-        // Set up network hierarchy panel
-        Properties properties = Utils.getSimbrainProperties();
-        if (properties.containsKey("showNetworkHierarchyPanel")) {
-            showNetworkHierarchyPanel = Boolean.parseBoolean(properties.getProperty("showNetworkHierarchyPanel"));
-        }
-        // networkHierarchyPanel = new NetworkHierarchyPanel(this);
-        // splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
-        // splitPane.setDividerLocation(.2);
-        // splitPane.setLeftComponent(networkHierarchyPanel);
-        // splitPane.setRightComponent(canvas);
+        // Add the main Canvas
         this.add("Center", canvas);
 
+        // Initialize priority text
         setPrioritiesVisible(prioritiesVisible);
-        // setHierarchyPanelVisible(showNetworkHierarchyPanel);
 
         // Event listeners
         removeDefaultEventListeners();
@@ -457,6 +447,7 @@ public class NetworkPanel extends JPanel {
         textHandle = new TextEventHandler(this);
         canvas.addInputEventListener(textHandle);
 
+        // Init network change listeners
         addNetworkListeners();
 
         // Don't show text when the canvas is sufficiently zoomed in
@@ -515,259 +506,36 @@ public class NetworkPanel extends JPanel {
 
         network.addPropertyChangeListener(
             evt -> {
-                if ("neuronArrayAdded".equals(evt.getPropertyName())) {
+                if ("neuronAdded".equals(evt.getPropertyName())) {
+                    addNeuron((Neuron) evt.getNewValue());
+                } else if ("neuronRemoved".equals(evt.getPropertyName())) {
+                    ((Neuron)evt.getOldValue()).delete();
+                } else if ("neuronsUpdated".equals(evt.getPropertyName())) {
+                    if (!isGuiOn()) {
+                        return;
+                    }
+                    NetworkPanel.this.updateNeuronNodes((List<Neuron>)evt.getNewValue());
+                } else if ("synapseAdded".equals(evt.getPropertyName())) {
+                    addSynapse((Synapse) evt.getNewValue());
+                } else if ("synapseRemoved".equals(evt.getPropertyName())) {
+                    ((Synapse)evt.getOldValue()).delete();
+                } else if ("textAdded".equals(evt.getPropertyName())) {
+                    addTextObject((NetworkTextObject) evt.getNewValue());
+                } else if ("textRemoved".equals(evt.getPropertyName())) {
+                    ((NetworkTextObject)evt.getOldValue()).delete();
+                } else if ("groupAdded".equals(evt.getPropertyName())) {
+                    addGroup((Group) evt.getNewValue());
+                } else if ("neuronArrayAdded".equals(evt.getPropertyName())) {
                     NeuronArrayNode nad = new NeuronArrayNode(this, (NeuronArray) evt.getNewValue());
                     canvas.getLayer().addChild(nad);
+                } else if ("updateTimeDisplay".equals(evt.getPropertyName())) {
+                    updateTime();
+                } else if ("updateCompleted".equals(evt.getPropertyName())) {
+                    NetworkPanel.this.setUpdateComplete((Boolean) evt.getNewValue());
                 }
             }
         );
 
-        // Handle general network events
-        network.addNetworkListener(new NetworkListener() {
-
-            @Override
-            public void updateNeurons() {
-                if (!isGuiOn()) {
-                    return;
-                }
-                EventQueue.invokeLater(new Runnable() {
-                    public void run() {
-                        NetworkPanel.this.updateNeuronNodes();
-                    }
-                });
-            }
-
-            @Override
-            public void updateNeurons(final Collection<Neuron> neurons) {
-                if (!isGuiOn()) {
-                    return;
-                }
-                EventQueue.invokeLater(new Runnable() {
-                    public void run() {
-                        NetworkPanel.this.updateNeuronNodes(neurons);
-                    }
-                });
-            }
-
-            @Override
-            public void updateSynapses() {
-                if (!isGuiOn()) {
-                    return;
-                }
-                EventQueue.invokeLater(new Runnable() {
-                    public void run() {
-                        NetworkPanel.this.updateSynapseNodes();
-                    }
-                });
-            }
-
-            @Override
-            public void updateSynapses(final Collection<Synapse> synapses) {
-                if (!isGuiOn()) {
-                    return;
-                }
-                EventQueue.invokeLater(new Runnable() {
-                    public void run() {
-                        NetworkPanel.this.updateSynapseNodes(synapses);
-                    }
-                });
-            }
-
-            @Override
-            public void setUpdateComplete(boolean updateComplete) {
-                NetworkPanel.this.setUpdateComplete(updateComplete);
-
-            }
-        });
-
-        // Handle Neuron Events
-        network.addNeuronListener(new NeuronListener() {
-
-            @Override
-            public void neuronAdded(final NetworkEvent<Neuron> e) {
-                addNeuron(e.getObject());
-            }
-
-            @Override
-            public void neuronRemoved(final NetworkEvent<Neuron> e) {
-                Neuron neuron = e.getObject();
-                removeNeuron(neuron);
-            }
-
-            @Override
-            public void neuronChanged(final NetworkEvent<Neuron> e) {
-                NeuronNode node = (NeuronNode) objectNodeMap.get(e.getObject());
-                if (node != null) {
-                    node.update();
-                }
-            }
-
-            @Override
-            public void neuronTypeChanged(final NetworkEvent<NeuronUpdateRule> e) {
-                // Can use this to allow activity generators to become neurons
-                // or vice
-                // versa. Must add a method that changes the shape object on the
-                // neuron node
-                // and then removes and adds the appropriate pnode to the
-                // NeuronNode
-                // NeuronNode node = (NeuronNode)
-                // objectNodeMap.get(e.getObjectToEdit());
-                // if (node != null) {
-                // node.updateShape();
-                // }
-            }
-
-            @Override
-            public void neuronMoved(final NetworkEvent<Neuron> e) {
-                NeuronNode node = (NeuronNode) objectNodeMap.get(e.getSource());
-                // In previous versions checked NeuronNode.isMoving == false.
-                // See NeuronNode isMoving comments
-                if (node != null) {
-                    node.pullViewPositionFromModel();
-                }
-            }
-
-            @Override
-            public void labelChanged(NetworkEvent<Neuron> e) {
-                NeuronNode node = (NeuronNode) objectNodeMap.get(e.getObject());
-                if (node != null) {
-                    node.updateTextLabel();
-                }
-            }
-
-        });
-
-        // Handle Synapse Events
-        network.addSynapseListener(new SynapseListener() {
-
-            @Override
-            public void synapseChanged(final NetworkEvent<Synapse> e) {
-                //SynapseNode node = (SynapseNode) objectNodeMap
-                //        .get(e.getObjectToEdit());
-                // node.updateClampStatus();
-            }
-
-            @Override
-            public void synapseTypeChanged(final NetworkEvent<SynapseUpdateRule> e) {
-            }
-
-            @Override
-            public void synapseAdded(final NetworkEvent<Synapse> e) {
-                NetworkPanel.this.addSynapse(e.getObject());
-            }
-
-            @Override
-            public void synapseRemoved(final NetworkEvent<Synapse> e) {
-                final Synapse synapse = e.getObject();
-                removeSynapse(synapse);
-            }
-        });
-
-        // Handle Text Events
-        network.addTextListener(new TextListener() {
-
-            @Override
-            public void textRemoved(NetworkTextObject removedText) {
-                TextNode node = (TextNode) objectNodeMap.get(removedText);
-                canvas.getLayer().removeChild(node);
-                objectNodeMap.remove(removedText);
-            }
-
-            @Override
-            public void textAdded(NetworkTextObject newText) {
-                NetworkPanel.this.addTextObject(newText);
-            }
-
-            @Override
-            public void textChanged(NetworkTextObject changedText) {
-                TextNode node = (TextNode) objectNodeMap.get(changedText);
-                node.update();
-            }
-
-        });
-
-        // Handle Group Events
-        network.addGroupListener(new GroupListener() {
-
-            @Override
-            public void groupAdded(final NetworkEvent<Group> e) {
-                addGroup(e.getObject());
-            }
-
-            @Override
-            public void groupChanged(final NetworkEvent<Group> e, final String description) {
-                Group group = e.getObject();
-                PNode groupNode = objectNodeMap.get(group);
-                if (groupNode != null) {
-                    updateComplete.incrementAndGet();
-                    NetworkPanel.this.setRunning(true);
-                    ((GroupNode) groupNode).updateConstituentNodes();
-                    NetworkPanel.this.setRunning(false);
-                    updateComplete.decrementAndGet();
-                }
-                if (description.equals(SynapseGroupNode.SYNAPSE_VISIBILITY_CHANGED)) {
-                    if (group instanceof SynapseGroup) {
-                        toggleSynapseVisibility(((SynapseGroup) group));
-                    }
-                }
-            }
-
-            @Override
-            public void groupRemoved(final NetworkEvent<Group> event) {
-                Group group = event.getObject();
-                removeGroup(group);
-            }
-
-            @Override
-            public void groupParameterChanged(NetworkEvent<Group> event) {
-                if (!isGuiOn()) {
-                    return;
-                }
-                Group group = event.getObject();
-                PNode groupNode = objectNodeMap.get(group);
-                if (groupNode != null) {
-                    updateComplete.incrementAndGet();
-                    NetworkPanel.this.setRunning(true);
-                    ((GroupNode) groupNode).updateConstituentNodes();
-                    NetworkPanel.this.setRunning(false);
-                    updateComplete.decrementAndGet();
-                }
-                if (group instanceof NeuronGroup) {
-                    NeuronGroupNode node = (NeuronGroupNode) objectNodeMap.get(event.getObject());
-                    if (node != null) {
-                        node.updateText();
-                    }
-                } else if (group instanceof SynapseGroup) {
-                    // TODO: Address the whole snyapse group arrow situation
-                    Object node = objectNodeMap.get(event.getObject());
-                    if (node != null) {
-                        if (node instanceof SynapseGroupNode) {
-                            ((SynapseGroupNode) node).updateText();
-                        } else {
-                            ((SynapseGroupNodeBidirectional) node).updateText();
-                        }
-                    }
-                } else if (group instanceof Subnetwork) {
-                    SubnetworkNode node = (SubnetworkNode) objectNodeMap.get(group);
-                    if (node != null) {
-                        node.updateText();
-                    }
-                }
-            }
-
-            @Override
-            public void groupUpdated(Group group) {
-                if (!isGuiOn()) {
-                    return;
-                }
-                PNode groupNode = objectNodeMap.get(group);
-                if (groupNode != null) {
-                    ((GroupNode) groupNode).updateConstituentNodes();
-                }
-            }
-
-        });
-
     }
 
     /**
@@ -785,6 +553,9 @@ public class NetworkPanel extends JPanel {
         updateComplete.decrementAndGet();
     }
 
+    /**
+     * Update the time label.
+     */
     public void updateTime() {
         timeLabel.update();
     }
@@ -797,11 +568,9 @@ public class NetworkPanel extends JPanel {
     private void updateNeuronNodes(Collection<Neuron> neurons) {
         // System.out.println("In update neuron nodes. Updating " +
         // neurons.size() + " neurons");
+        //TODO: Break this into separate methods
         for (Neuron neuron : neurons) {
-            NeuronNode neuronNode = ((NeuronNode) objectNodeMap.get(neuron));
-            if (neuronNode != null) {
-                neuronNode.update();
-            }
+            neuron.fireChanged();
         }
         timeLabel.update();
         updateComplete.decrementAndGet();
@@ -1101,7 +870,6 @@ public class NetworkPanel extends JPanel {
                 whereToAdd.setLocation(whereToAdd.getX() + DEFAULT_SPACING, whereToAdd.getY() + DEFAULT_SPACING);
             }
         } else if (group instanceof SynapseGroup) {
-
             addSynapseGroup((SynapseGroup) group);
         } else if (group instanceof Subnetwork) {
             addSubnetwork((Subnetwork) group);
@@ -1219,15 +987,19 @@ public class NetworkPanel extends JPanel {
         for (Synapse synapse : synapseGroup.getExcitatorySynapses()) {
             addSynapse(synapse);
             SynapseNode node = (SynapseNode) objectNodeMap.get(synapse);
-            canvas.getLayer().addChild(node);
-            nodes.add(node);
+            if (node!= null) {
+                canvas.getLayer().addChild(node);
+                nodes.add(node);
+            }
         }
         // Add inhibitory synapse nodes to canvas
         for (Synapse synapse : synapseGroup.getInhibitorySynapses()) {
             addSynapse(synapse);
             SynapseNode node = (SynapseNode) objectNodeMap.get(synapse);
-            canvas.getLayer().addChild(node);
-            nodes.add(node);
+            if (node!= null) {
+                canvas.getLayer().addChild(node);
+                nodes.add(node);
+            }
         }
         // Add synapse nodes to group node
         SynapseGroupNodeVisible synapseGroupNode = new SynapseGroupNodeVisible(this, synapseGroup);
@@ -1324,6 +1096,7 @@ public class NetworkPanel extends JPanel {
      * @param subnet the group to add.
      */
     private void addSubnetwork(Subnetwork subnet) {
+
         Set<PNode> nodes = new HashSet<PNode>();
         // Add neuron groups
         for (NeuronGroup neuronGroup : ((Subnetwork) subnet).getNeuronGroupList()) {
@@ -1332,6 +1105,10 @@ public class NetworkPanel extends JPanel {
             nodes.add(neuronGroupNode);
         }
 
+        // Fire graphic updates for neurons. Must do this before synapse groups so neurons
+        // are properly positioned
+        network.fireNeuronsUpdated(subnet.getFlatNeuronList());
+
         // Add synapse groups
         for (SynapseGroup synapseGroup : ((Subnetwork) subnet).getSynapseGroupList()) {
             addSynapseGroup(synapseGroup);
@@ -1351,6 +1128,8 @@ public class NetworkPanel extends JPanel {
         canvas.getLayer().addChild(subnetNode);
         objectNodeMap.put(subnet, subnetNode);
 
+        subnet.fireTextUpdated();
+
         // Update canvas
         repaint();
     }
@@ -1421,7 +1200,7 @@ public class NetworkPanel extends JPanel {
      *
      * @param synapseGroup the synapse group whose visibility should be toggled.
      */
-    private void toggleSynapseVisibility(SynapseGroup synapseGroup) {
+    public void toggleSynapseVisibility(SynapseGroup synapseGroup) {
 
         // Remove existing synapsegroup nodes and synapsenodes
         removeGroup(synapseGroup);
@@ -1671,14 +1450,13 @@ public class NetworkPanel extends JPanel {
      * Delete selected items.
      */
     public void deleteSelectedObjects() {
-
         for (PNode selectedNode : getSelection()) {
             if (selectedNode instanceof NeuronNode) {
                 NeuronNode selectedNeuronNode = (NeuronNode) selectedNode;
                 final Neuron neuron = selectedNeuronNode.getNeuron();
                 // TODO: Refactor events.  Added the flag below but there is currently
                 // no way to update the network after removing all the neurons.
-                network.removeNeuron(neuron, false);
+                network.removeNeuron(neuron, true);
             } else if (selectedNode instanceof SynapseNode) {
                 SynapseNode selectedSynapseNode = (SynapseNode) selectedNode;
                 network.removeSynapse(selectedSynapseNode.getSynapse());
@@ -2318,14 +2096,6 @@ public class NetworkPanel extends JPanel {
     // click, but condition not fulfilled....
     // public boolean resetPasteTrail = false;
 
-    /**
-     * @param e
-     * @see NetworkListener
-     */
-
-    public void modelCleared(final NetworkEvent e) {
-        // empty
-    }
 
     /**
      * Synchronize model and view.
@@ -2483,51 +2253,30 @@ public class NetworkPanel extends JPanel {
         repaint();
     }
 
-    /**
-     * @return Returns the in out mode.
-     */
     public boolean getInOutMode() {
         return inOutMode;
     }
 
-    /**
-     * @return Returns the numberOfPastes.
-     */
     public double getNumberOfPastes() {
         return numberOfPastes;
     }
 
-    /**
-     * @param numberOfPastes The numberOfPastes to set.
-     */
     public void setNumberOfPastes(final double numberOfPastes) {
         this.numberOfPastes = numberOfPastes;
     }
 
-    /**
-     * @return Returns show subnet outline.
-     */
     public boolean getShowSubnetOutline() {
         return showSubnetOutline;
     }
 
-    /**
-     * @param showSubnetOutline Sets Show subnet outline.
-     */
     public void setShowSubnetOutline(final boolean showSubnetOutline) {
         this.showSubnetOutline = showSubnetOutline;
     }
 
-    /**
-     * @return Returns Show time.
-     */
     public boolean getShowTime() {
         return showTime;
     }
 
-    /**
-     * @param showTime Sets the show time.
-     */
     public void setShowTime(final boolean showTime) {
         this.showTime = showTime;
         timeLabel.setVisible(showTime);
@@ -3332,7 +3081,6 @@ public class NetworkPanel extends JPanel {
             node.getNeuron().clear();
         }
         this.setSelection(getNeuronNodes());
-        network.fireNeuronsUpdated();
     }
 
     /**
@@ -3348,9 +3096,6 @@ public class NetworkPanel extends JPanel {
         for (SynapseNode node : getSelectedSynapses()) {
             node.getSynapse().forceSetStrength(0);
         }
-        network.fireSynapsesUpdated(
-            getSelectedModelSynapses());
-        network.fireNeuronsUpdated();
     }
 
     /**
diff --git a/src/org/simbrain/network/gui/dialogs/group/SummaryPanel.java b/src/org/simbrain/network/gui/dialogs/group/SummaryPanel.java
index e6b522b..e551da3 100644
--- a/src/org/simbrain/network/gui/dialogs/group/SummaryPanel.java
+++ b/src/org/simbrain/network/gui/dialogs/group/SummaryPanel.java
@@ -408,9 +408,6 @@ public class SummaryPanel extends EditablePanel {
         outgoingField.setText(sg.getTargetNeuronGroup().getLabel());
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public boolean commitChanges() {
         group.setLabel(nameField.getText());
@@ -428,6 +425,8 @@ public class SummaryPanel extends EditablePanel {
             }
         }
 
+        group.fireTextUpdated();
+
         return true; // Always Successful: the only field it makes sense to
         // commit from here cannot fail as a result of user action.
     }
diff --git a/src/org/simbrain/network/gui/dialogs/network/HopfieldCreationDialog.java b/src/org/simbrain/network/gui/dialogs/network/HopfieldCreationDialog.java
index 3000db4..2e346ba 100644
--- a/src/org/simbrain/network/gui/dialogs/network/HopfieldCreationDialog.java
+++ b/src/org/simbrain/network/gui/dialogs/network/HopfieldCreationDialog.java
@@ -54,7 +54,10 @@ public class HopfieldCreationDialog extends StandardDialog {
      */
     private HopfieldPropertiesPanel hopPropertiesPanel;
 
-    private Layout.LayoutObject layoutObject = new Layout.LayoutObject();
+    /**
+     * Layout to use in property editor.
+     */
+    private Layout.LayoutObject layoutObject = new Layout.LayoutObject(Hopfield.DEFAULT_LAYOUT);
 
     /**
      * Layout panel.
@@ -105,9 +108,6 @@ public class HopfieldCreationDialog extends StandardDialog {
 
     }
 
-    /**
-     * Called when dialog closes.
-     */
     @Override
     protected void closeDialogOk() {
         hopPropertiesPanel.commitChanges();
diff --git a/src/org/simbrain/network/gui/dialogs/network/HopfieldPropertiesPanel.java b/src/org/simbrain/network/gui/dialogs/network/HopfieldPropertiesPanel.java
index ef5382e..14276f8 100644
--- a/src/org/simbrain/network/gui/dialogs/network/HopfieldPropertiesPanel.java
+++ b/src/org/simbrain/network/gui/dialogs/network/HopfieldPropertiesPanel.java
@@ -172,24 +172,17 @@ public class HopfieldPropertiesPanel extends GroupPropertiesPanel {
         });
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public void fillFieldValues() {
         if (isCreationPanel) {
-            hopfield = new Hopfield(null, hopfield.DEFAULT_NUM_UNITS);
-            tfNumNeurons.setText("" + hopfield.DEFAULT_NUM_UNITS);
+            tfNumNeurons.setText("" + Hopfield.DEFAULT_NUM_UNITS);
         }
-        cbUpdateOrder.setSelectedItem(hopfield.getUpdateFunc().getName());
-        priorityChkBx.setSelected(hopfield.isByPriority());
-        shuffleUpdateOrder.setEnabled(!hopfield.isByPriority());
+        cbUpdateOrder.setSelectedItem(Hopfield.DEFAULT_UPDATE);
+        priorityChkBx.setSelected(Hopfield.DEFAULT_PRIORITY);
+        shuffleUpdateOrder.setEnabled(!Hopfield.DEFAULT_PRIORITY);
         shuffleUpdateOrder.setSelected(false);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public boolean commitChanges() {
         try {
diff --git a/src/org/simbrain/network/gui/dialogs/network/SOMGroupCreationDialog.java b/src/org/simbrain/network/gui/dialogs/network/SOMGroupCreationDialog.java
index 781577d..6a90982 100644
--- a/src/org/simbrain/network/gui/dialogs/network/SOMGroupCreationDialog.java
+++ b/src/org/simbrain/network/gui/dialogs/network/SOMGroupCreationDialog.java
@@ -108,9 +108,9 @@ public class SOMGroupCreationDialog extends StandardDialog {
         SOMGroup som = (SOMGroup) somPanel.getGroup();
         layoutPanel.commitChanges();
         som.setLayout(layoutObject.getLayout());
+        networkPanel.getNetwork().addGroup(som);
         som.applyLayout();
         som.offset(networkPanel.getWhereToAdd().getX(), networkPanel.getWhereToAdd().getY());
-        networkPanel.getNetwork().addGroup(som);
         super.closeDialogOk();
 
     }
diff --git a/src/org/simbrain/network/gui/dialogs/network/SOMPropertiesPanel.java b/src/org/simbrain/network/gui/dialogs/network/SOMPropertiesPanel.java
index ee4a1ae..1ad8635 100644
--- a/src/org/simbrain/network/gui/dialogs/network/SOMPropertiesPanel.java
+++ b/src/org/simbrain/network/gui/dialogs/network/SOMPropertiesPanel.java
@@ -166,20 +166,28 @@ public class SOMPropertiesPanel extends GroupPropertiesPanel {
         // For creation panels use an "empty" som network to harvest
         // default values
         if (panelType == SOMPropsPanelType.CREATE_GROUP) {
-            som = new SOMGroup(null, 1);
             tfNumSOMNeurons.setText("" + DEFAULT_NUM_SOM_NEURONS);
-            fillSOMGroupFieldValues();
+            fillSOMDefaultValues();
         } else if (panelType == SOMPropsPanelType.CREATE_NETWORK) {
-            som = new SOMNetwork(null, 1, 1, networkPanel.getWhereToAdd());
             tfNumSOMNeurons.setText("" + DEFAULT_NUM_SOM_NEURONS);
             tfNumInputNeurons.setText("" + DEFAULT_NUM_INPUT_NEURONS);
-            fillSOMNetworkFieldValues();
+            fillSOMDefaultValues();
         } else if (panelType == SOMPropsPanelType.EDIT_GROUP) {
             fillSOMGroupFieldValues();
         }
     }
 
     /**
+     * Fill fields to default values for SOM Groups.
+     */
+    private void fillSOMDefaultValues() {
+        tfAlpha.setText("" + SOMGroup.DEFAULT_ALPHA);
+        tfInitNeighborhoodSize.setText("" + SOMGroup.DEFAULT_INIT_NSIZE);
+        tfAlphaDecayRate.setText("" + SOMGroup.DEFAULT_DECAY_RATE);
+        tfNeigborhoodDecayAmount.setText("" + SOMGroup.DEFAULT_NEIGHBORHOOD_DECAY_AMOUNT);
+    }
+
+    /**
      * Fill field values for a SOM group.
      */
     private void fillSOMGroupFieldValues() {
@@ -187,7 +195,6 @@ public class SOMPropertiesPanel extends GroupPropertiesPanel {
         tfInitNeighborhoodSize.setText(Double.toString(((SOMGroup) som).getInitNeighborhoodSize()));
         tfAlphaDecayRate.setText(Double.toString(((SOMGroup) som).getAlphaDecayRate()));
         tfNeigborhoodDecayAmount.setText(Double.toString(((SOMGroup) som).getNeighborhoodDecayAmount()));
-
     }
 
     /**
@@ -201,9 +208,6 @@ public class SOMPropertiesPanel extends GroupPropertiesPanel {
 
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public boolean commitChanges() {
         try {
diff --git a/src/org/simbrain/network/gui/dialogs/network/SRNCreationDialog.java b/src/org/simbrain/network/gui/dialogs/network/SRNCreationDialog.java
index 71525a1..fb34d90 100644
--- a/src/org/simbrain/network/gui/dialogs/network/SRNCreationDialog.java
+++ b/src/org/simbrain/network/gui/dialogs/network/SRNCreationDialog.java
@@ -194,7 +194,8 @@ public class SRNCreationDialog extends StandardDialog {
             SimpleRecurrentNetwork srn = new SimpleRecurrentNetwork(panel.getNetwork(), Integer.parseInt(tfNumInputs.getText()), Integer.parseInt(tfNumHidden.getText()), Integer.parseInt(tfNumOutputs.getText()), hidType, outType, panel.getWhereToAdd());
 
             srn.getParentNetwork().addGroup(srn);
-            srn.getParentNetwork().fireGroupUpdated(srn);
+            //TODO
+            // srn.getParentNetwork().fireGroupUpdated(srn);
             dispose();
         } catch (NumberFormatException nfe) {
             JOptionPane.showMessageDialog(null, "Inappropriate Field Values:" + "\nNetwork construction failed.", "Error", JOptionPane.ERROR_MESSAGE);
diff --git a/src/org/simbrain/network/gui/nodes/NeuronGroupNode.java b/src/org/simbrain/network/gui/nodes/NeuronGroupNode.java
index 73d7432..516302c 100644
--- a/src/org/simbrain/network/gui/nodes/NeuronGroupNode.java
+++ b/src/org/simbrain/network/gui/nodes/NeuronGroupNode.java
@@ -118,6 +118,7 @@ public class NeuronGroupNode extends PNode implements GroupNode, PropertyChangeL
      * @param group        the neuron group
      */
     public NeuronGroupNode(NetworkPanel networkPanel, NeuronGroup group) {
+
         this.networkPanel = networkPanel;
         this.neuronGroup = group;
 
@@ -137,6 +138,23 @@ public class NeuronGroupNode extends PNode implements GroupNode, PropertyChangeL
             }
         }
         addPropertyChangeListener(PROPERTY_FULL_BOUNDS, this);
+        group.addPropertyChangeListener(new PropertyChangeListener() {
+            @Override
+            public void propertyChange(PropertyChangeEvent evt) {
+
+                if ("delete".equals(evt.getPropertyName())) {
+                    NeuronGroupNode.this.removeFromParent();
+                } else if ("label".equals(evt.getPropertyName())) {
+                    NeuronGroupNode.this.updateText();
+                } else if ("recordingStarted".equals(evt.getPropertyName())) {
+                    NeuronGroupNode.this.updateText();
+                } else if ("recordingStopped".equals(evt.getPropertyName())) {
+                    NeuronGroupNode.this.updateText();
+                } else if ("moved".equals(evt.getPropertyName())) {
+                    NeuronGroupNode.this.syncToModel();
+                }
+            }
+        });
 
     }
 
@@ -164,9 +182,6 @@ public class NeuronGroupNode extends PNode implements GroupNode, PropertyChangeL
         getNetworkPanel().setSelection(nodes);
     }
 
-    /**
-     * @return the networkPanel
-     */
     public NetworkPanel getNetworkPanel() {
         return networkPanel;
     }
@@ -212,6 +227,12 @@ public class NeuronGroupNode extends PNode implements GroupNode, PropertyChangeL
         }
     }
 
+    public void syncToModel() {
+        for (Object object : outlinedObjects.getChildrenReference()) {
+            ((NeuronNode) object).pullViewPositionFromModel();
+        }
+    }
+
     @Override
     public void updateConstituentNodes() {
         for (Object object : outlinedObjects.getChildrenReference()) {
@@ -917,5 +938,4 @@ public class NeuronGroupNode extends PNode implements GroupNode, PropertyChangeL
     public List<InteractionBox> getInteractionBoxes() {
         return Collections.singletonList((InteractionBox) interactionBox);
     }
-
 }
diff --git a/src/org/simbrain/network/gui/nodes/NeuronNode.java b/src/org/simbrain/network/gui/nodes/NeuronNode.java
index d9e6927..a5d331b 100644
--- a/src/org/simbrain/network/gui/nodes/NeuronNode.java
+++ b/src/org/simbrain/network/gui/nodes/NeuronNode.java
@@ -214,6 +214,25 @@ public class NeuronNode extends ScreenElement implements PropertyChangeListener
         PBounds bounds = mainShape.getBounds();
         setBounds(bounds);
 
+        neuron.addPropertyChangeListener(new PropertyChangeListener() {
+            @Override
+            public void propertyChange(PropertyChangeEvent evt) {
+                //TODO: Order
+                if ("delete".equals(evt.getPropertyName())) {
+                    NeuronNode.this.removeFromParent();
+                } else if ("activation".equals(evt.getPropertyName())) {
+                    NeuronNode.this.updateColor();
+                    NeuronNode.this.updateText();
+                } else if ("label".equals(evt.getPropertyName())) {
+                    NeuronNode.this.updateTextLabel();
+                } else if ("clamped".equals(evt.getPropertyName())) {
+                    NeuronNode.this.updateClampStatus();
+                } else if ("moved".equals(evt.getPropertyName())) {
+                    NeuronNode.this.pullViewPositionFromModel();
+                }
+            }
+        });
+
     }
 
     /**
diff --git a/src/org/simbrain/network/gui/nodes/SubnetworkNode.java b/src/org/simbrain/network/gui/nodes/SubnetworkNode.java
index 8fbcb5c..97e529f 100644
--- a/src/org/simbrain/network/gui/nodes/SubnetworkNode.java
+++ b/src/org/simbrain/network/gui/nodes/SubnetworkNode.java
@@ -87,7 +87,16 @@ public class SubnetworkNode extends PPath.Float implements GroupNode, PropertyCh
         setContextMenu(this.getDefaultContextMenu());
 
         addPropertyChangeListener(PROPERTY_FULL_BOUNDS, this);
-
+        group.addPropertyChangeListener(new PropertyChangeListener() {
+            @Override
+            public void propertyChange(PropertyChangeEvent evt) {
+                if ("delete".equals(evt.getPropertyName())) {
+                    SubnetworkNode.this.removeFromParent();
+                } else if ("label".equals(evt.getPropertyName())) {
+                    SubnetworkNode.this.updateText();
+                }
+            }
+        });
     }
 
     /**
@@ -123,7 +132,6 @@ public class SubnetworkNode extends PPath.Float implements GroupNode, PropertyCh
         updateText();
     }
 
-
     /**
      * Update the text in the interaction box.
      */
@@ -132,8 +140,6 @@ public class SubnetworkNode extends PPath.Float implements GroupNode, PropertyCh
         interactionBox.updateText();
     }
 
-    ;
-
     /**
      * @return the networkPanel
      */
diff --git a/src/org/simbrain/network/gui/nodes/SynapseGroupInteractionBox.java b/src/org/simbrain/network/gui/nodes/SynapseGroupInteractionBox.java
index 4a289c8..3087e6c 100644
--- a/src/org/simbrain/network/gui/nodes/SynapseGroupInteractionBox.java
+++ b/src/org/simbrain/network/gui/nodes/SynapseGroupInteractionBox.java
@@ -25,7 +25,6 @@ import org.simbrain.network.groups.SynapseGroup;
 import org.simbrain.network.gui.NetworkPanel;
 import org.simbrain.network.gui.WeightMatrixViewer;
 import org.simbrain.network.gui.dialogs.group.SynapseGroupDialog;
-import org.simbrain.network.listeners.NetworkEvent;
 import org.simbrain.resource.ResourceManager;
 import org.simbrain.util.SimbrainConstants.Polarity;
 import org.simbrain.util.StandardDialog;
diff --git a/src/org/simbrain/network/gui/nodes/SynapseGroupNode.java b/src/org/simbrain/network/gui/nodes/SynapseGroupNode.java
index 7e0db59..3cf4148 100644
--- a/src/org/simbrain/network/gui/nodes/SynapseGroupNode.java
+++ b/src/org/simbrain/network/gui/nodes/SynapseGroupNode.java
@@ -61,12 +61,6 @@ public class SynapseGroupNode extends PNode implements GroupNode, PropertyChange
     protected SynapseGroupInteractionBox interactionBox;
 
     /**
-     * Constant for use in group changed events, indicating that the visibility
-     * of synpases in a synapse group has changed.
-     */
-    public static final String SYNAPSE_VISIBILITY_CHANGED = "synapseVisibilityChanged";
-
-    /**
      * Create a Synapse Group PNode.
      *
      * @param networkPanel parent panel
@@ -85,6 +79,19 @@ public class SynapseGroupNode extends PNode implements GroupNode, PropertyChange
         addChild(interactionBox);
         // Must do this after it's added to properly locate it
         interactionBox.updateText();
+        group.addPropertyChangeListener(new PropertyChangeListener() {
+            @Override
+            public void propertyChange(PropertyChangeEvent evt) {
+                if ("delete".equals(evt.getPropertyName())) {
+                    SynapseGroupNode.this.removeFromParent();
+                } else if ("label".equals(evt.getPropertyName())) {
+                    SynapseGroupNode.this.updateText();
+                } else if ("synapseVisibilityChanged".equals(evt.getPropertyName())) {
+                    SynapseGroupNode.this.getNetworkPanel().
+                        toggleSynapseVisibility((SynapseGroup) evt.getNewValue());
+                }
+            }
+        });
     }
 
     @Override
@@ -94,23 +101,14 @@ public class SynapseGroupNode extends PNode implements GroupNode, PropertyChange
         layoutChildren();
     }
 
-    /**
-     * @return the networkPanel
-     */
     public NetworkPanel getNetworkPanel() {
         return networkPanel;
     }
 
-    /**
-     * @return the interactionBox
-     */
     public SynapseGroupInteractionBox getInteractionBox() {
         return interactionBox;
     }
 
-    /**
-     * @return the synapseGroup
-     */
     public SynapseGroup getSynapseGroup() {
         return synapseGroup;
     }
diff --git a/src/org/simbrain/network/gui/nodes/SynapseNode.java b/src/org/simbrain/network/gui/nodes/SynapseNode.java
index d0abbb4..c71b9d0 100644
--- a/src/org/simbrain/network/gui/nodes/SynapseNode.java
+++ b/src/org/simbrain/network/gui/nodes/SynapseNode.java
@@ -29,6 +29,8 @@ import java.awt.*;
 import java.awt.geom.Arc2D;
 import java.awt.geom.Line2D;
 import java.awt.geom.Point2D;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
 
 /**
  * <b>SynapseNode</b> is a Piccolo PNode corresponding to a Neuron in the neural
@@ -147,6 +149,18 @@ public final class SynapseNode extends ScreenElement {
         setPickable(true);
         circle.setPickable(true);
         line.setPickable(false);
+
+        synapse.addPropertyChangeListener(new PropertyChangeListener() {
+            @Override
+            public void propertyChange(PropertyChangeEvent evt) {
+                if ("delete".equals(evt.getPropertyName())) {
+                    SynapseNode.this.removeFromParent();
+                } else if ("strength".equals(evt.getPropertyName())) {
+                    SynapseNode.this.updateColor();
+                    SynapseNode.this.updateDiameter();
+                }
+            }
+        });
     }
 
     /**
diff --git a/src/org/simbrain/network/gui/nodes/TextNode.java b/src/org/simbrain/network/gui/nodes/TextNode.java
index 90ac722..ce1d698 100644
--- a/src/org/simbrain/network/gui/nodes/TextNode.java
+++ b/src/org/simbrain/network/gui/nodes/TextNode.java
@@ -63,6 +63,14 @@ public class TextNode extends ScreenElement implements PropertyChangeListener {
         this.addChild(pStyledText);
         this.setBounds(pStyledText.getBounds());
         addPropertyChangeListener(PROPERTY_FULL_BOUNDS, this);
+        text.addPropertyChangeListener(new PropertyChangeListener() {
+            @Override
+            public void propertyChange(PropertyChangeEvent evt) {
+                if ("delete".equals(evt.getPropertyName())) {
+                    TextNode.this.removeFromParent();
+                }
+            }
+        });
         update();
     }
 
@@ -93,7 +101,6 @@ public class TextNode extends ScreenElement implements PropertyChangeListener {
 
     @Override
     protected boolean hasContextMenu() {
-        // TODO Auto-generated method stub
         return true;
     }
 
@@ -138,9 +145,6 @@ public class TextNode extends ScreenElement implements PropertyChangeListener {
         setBounds(pStyledText.getBounds());
     }
 
-    /**
-     * @return the pStyledText
-     */
     public PStyledText getPStyledText() {
         return pStyledText;
     }
diff --git a/src/org/simbrain/network/gui/nodes/neuronGroupNodes/SOMGroupNode.java b/src/org/simbrain/network/gui/nodes/neuronGroupNodes/SOMGroupNode.java
index 9d68348..c8151cd 100644
--- a/src/org/simbrain/network/gui/nodes/neuronGroupNodes/SOMGroupNode.java
+++ b/src/org/simbrain/network/gui/nodes/neuronGroupNodes/SOMGroupNode.java
@@ -87,21 +87,24 @@ public class SOMGroupNode extends NeuronGroupNode {
             public void actionPerformed(final ActionEvent event) {
                 SOMGroup group = ((SOMGroup) getNeuronGroup());
                 group.reset();
-                group.getParentNetwork().fireGroupUpdated(group);
+                //TODO
+                //group.getParentNetwork().fireGroupUpdated(group);
             }
         }));
         super.addCustomMenuItem(new JMenuItem(new AbstractAction("Recall SOM Memory") {
             public void actionPerformed(final ActionEvent event) {
                 SOMGroup group = ((SOMGroup) getNeuronGroup());
                 group.recall();
-                group.getParentNetwork().fireGroupUpdated(group);
+                //TODO
+                // group.getParentNetwork().fireGroupUpdated(group);
             }
         }));
         super.addCustomMenuItem(new JMenuItem(new AbstractAction("Randomize SOM Weights") {
             public void actionPerformed(final ActionEvent event) {
                 SOMGroup group = ((SOMGroup) getNeuronGroup());
                 group.randomizeIncomingWeights();
-                group.getParentNetwork().fireGroupUpdated(group);
+                //TODO
+                // group.getParentNetwork().fireGroupUpdated(group);
             }
         }));
     }
diff --git a/src/org/simbrain/network/gui/nodes/subnetworkNodes/CompetitiveNetworkNode.java b/src/org/simbrain/network/gui/nodes/subnetworkNodes/CompetitiveNetworkNode.java
index e9c7120..1738cee 100644
--- a/src/org/simbrain/network/gui/nodes/subnetworkNodes/CompetitiveNetworkNode.java
+++ b/src/org/simbrain/network/gui/nodes/subnetworkNodes/CompetitiveNetworkNode.java
@@ -66,7 +66,8 @@ public class CompetitiveNetworkNode extends SubnetworkNode {
             public void actionPerformed(final ActionEvent event) {
                 CompetitiveNetwork net = ((CompetitiveNetwork) getSubnetwork());
                 net.update();
-                net.getParentNetwork().fireGroupUpdated(net);
+                //TODO
+                // net.getParentNetwork().fireGroupUpdated(net);
             }
         };
         menu.add(trainNet);
@@ -75,7 +76,8 @@ public class CompetitiveNetworkNode extends SubnetworkNode {
             public void actionPerformed(final ActionEvent event) {
                 CompetitiveNetwork net = ((CompetitiveNetwork) getSubnetwork());
                 net.getCompetitive().randomize();
-                net.getParentNetwork().fireGroupUpdated(net.getSynapseGroup());
+                //TODO
+                // net.getParentNetwork().fireGroupUpdated(net.getSynapseGroup());
             }
         };
         menu.add(randomizeNet);
diff --git a/src/org/simbrain/network/gui/nodes/subnetworkNodes/SOMNetworkNode.java b/src/org/simbrain/network/gui/nodes/subnetworkNodes/SOMNetworkNode.java
index a8a0cb1..ba75c66 100644
--- a/src/org/simbrain/network/gui/nodes/subnetworkNodes/SOMNetworkNode.java
+++ b/src/org/simbrain/network/gui/nodes/subnetworkNodes/SOMNetworkNode.java
@@ -65,7 +65,8 @@ public class SOMNetworkNode extends SubnetworkNode {
             public void actionPerformed(final ActionEvent event) {
                 SOMNetwork net = ((SOMNetwork) getSubnetwork());
                 net.update();
-                net.getParentNetwork().fireGroupUpdated(net);
+                //TODO
+                // net.getParentNetwork().fireGroupUpdated(net);
             }
         };
         menu.add(trainNet);
@@ -74,7 +75,8 @@ public class SOMNetworkNode extends SubnetworkNode {
             public void actionPerformed(final ActionEvent event) {
                 SOMNetwork net = ((SOMNetwork) getSubnetwork());
                 net.getSom().randomizeIncomingWeights();
-                net.getParentNetwork().fireGroupUpdated(net);
+                //TODO
+                // net.getParentNetwork().fireGroupUpdated(net);
             }
         };
         menu.add(randomizeNet);
diff --git a/src/org/simbrain/network/gui/trainer/IterativeControlsPanel.java b/src/org/simbrain/network/gui/trainer/IterativeControlsPanel.java
index aa08552..50b8e65 100644
--- a/src/org/simbrain/network/gui/trainer/IterativeControlsPanel.java
+++ b/src/org/simbrain/network/gui/trainer/IterativeControlsPanel.java
@@ -254,7 +254,8 @@ public class IterativeControlsPanel extends JPanel {
     private void randomizeNetwork() {
         initTrainer(true);
         trainer.randomize();
-        panel.getNetwork().fireGroupUpdated(trainer.getTrainableNetwork().getNetwork());
+        //TODO
+        //panel.getNetwork().fireGroupUpdated(trainer.getTrainableNetwork().getNetwork());
     }
 
     private void editTrainerProperties() {
diff --git a/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/BoltzmannTrainerControlsPanel.java b/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/BoltzmannTrainerControlsPanel.java
index 8dcb2b8..7016322 100644
--- a/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/BoltzmannTrainerControlsPanel.java
+++ b/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/BoltzmannTrainerControlsPanel.java
@@ -155,9 +155,7 @@ public class BoltzmannTrainerControlsPanel extends JPanel {
             putValue(SHORT_DESCRIPTION, "Iterate training until stopping condition met");
         }
 
-        /**
-         * {@inheritDoc}
-         */
+        @Override
         public void actionPerformed(ActionEvent arg0) {
             if (trainer == null) {
                 return;
@@ -194,7 +192,8 @@ public class BoltzmannTrainerControlsPanel extends JPanel {
             } else {
                 // Stop running
                 trainer.setUpdateCompleted(true);
-                panel.getNetwork().fireGroupUpdated(network);
+                //TODO
+                // panel.getNetwork().fireGroupUpdated(network);
                 putValue(SMALL_ICON, ResourceManager.getImageIcon("Play.png"));
             }
 
@@ -214,9 +213,7 @@ public class BoltzmannTrainerControlsPanel extends JPanel {
             // putValue(SHORT_DESCRIPTION, "Import table from .csv");
         }
 
-        /**
-         * {@inheritDoc}
-         */
+        @Override
         public void actionPerformed(ActionEvent arg0) {
             if (trainer == null) {
                 return;
@@ -224,7 +221,8 @@ public class BoltzmannTrainerControlsPanel extends JPanel {
             try {
                 trainer.apply();
                 updatePanel();
-                panel.getNetwork().fireGroupUpdated(network);
+                //TODO
+                // panel.getNetwork().fireGroupUpdated(network);
             } catch (DataNotInitializedException e) {
                 JOptionPane.showOptionDialog(null, e.getMessage(), "Warning", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
             }
@@ -244,16 +242,16 @@ public class BoltzmannTrainerControlsPanel extends JPanel {
             putValue(SHORT_DESCRIPTION, "Reset network");
         }
 
-        /**
-         * {@inheritDoc}
-         */
+        @Override
         public void actionPerformed(ActionEvent arg0) {
             //            network.getSom().reset();
             trainer.setIteration(0);
-            panel.getNetwork().fireGroupUpdated(network);
+            //TODO
+            // panel.getNetwork().fireGroupUpdated(network);
             updatePanel();
         }
     };
+
     /**
      * Action for randomizing the underlying network.
      */
@@ -266,19 +264,15 @@ public class BoltzmannTrainerControlsPanel extends JPanel {
             putValue(SHORT_DESCRIPTION, "Randomize network");
         }
 
-        /**
-         * {@inheritDoc}
-         */
+        @Override
         public void actionPerformed(ActionEvent arg0) {
             //            network.getSom().randomizeIncomingWeights();
             updatePanel();
-            panel.getNetwork().fireGroupUpdated(network.getSynapseGroup());
+            //TODO
+            // panel.getNetwork().fireGroupUpdated(network.getSynapseGroup());
         }
     };
 
-    /**
-     * @return the trainer
-     */
     public BoltzmannTrainer getTrainer() {
         return trainer;
     }
diff --git a/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/CompetitiveTrainerControlsPanel.java b/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/CompetitiveTrainerControlsPanel.java
index 5580c8b..ebbfcc6 100644
--- a/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/CompetitiveTrainerControlsPanel.java
+++ b/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/CompetitiveTrainerControlsPanel.java
@@ -171,7 +171,8 @@ public class CompetitiveTrainerControlsPanel extends JPanel {
                 // Stop running
                 trainer.setUpdateCompleted(true);
                 update();
-                panel.getNetwork().fireGroupUpdated(network);
+                //TODO
+                //panel.getNetwork().fireGroupUpdated(network);
                 putValue(SMALL_ICON, ResourceManager.getImageIcon("Play.png"));
             }
 
@@ -201,7 +202,8 @@ public class CompetitiveTrainerControlsPanel extends JPanel {
             try {
                 trainer.apply();
                 update();
-                panel.getNetwork().fireGroupUpdated(network);
+                //TODO
+                //panel.getNetwork().fireGroupUpdated(network);
             } catch (DataNotInitializedException e) {
                 JOptionPane.showOptionDialog(null, e.getMessage(), "Warning", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
             }
@@ -221,13 +223,12 @@ public class CompetitiveTrainerControlsPanel extends JPanel {
             putValue(SHORT_DESCRIPTION, "Reset network");
         }
 
-        /**
-         * {@inheritDoc}
-         */
+        @Override
         public void actionPerformed(ActionEvent arg0) {
             network.getCompetitive().randomize();
             trainer.setIteration(0);
-            panel.getNetwork().fireGroupUpdated(network);
+            //TODO
+            //panel.getNetwork().fireGroupUpdated(network);
         }
     };
     /**
@@ -242,13 +243,12 @@ public class CompetitiveTrainerControlsPanel extends JPanel {
             putValue(SHORT_DESCRIPTION, "Randomize network");
         }
 
-        /**
-         * {@inheritDoc}
-         */
+        @Override
         public void actionPerformed(ActionEvent arg0) {
             network.getCompetitive().randomize();
             update();
-            panel.getNetwork().fireGroupUpdated(network);
+            //TODO
+            //panel.getNetwork().fireGroupUpdated(network);
         }
     };
 
diff --git a/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/SOMTrainerControlsPanel.java b/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/SOMTrainerControlsPanel.java
index 769e1c3..540ebfc 100644
--- a/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/SOMTrainerControlsPanel.java
+++ b/src/org/simbrain/network/gui/trainer/subnetworkTrainingPanels/SOMTrainerControlsPanel.java
@@ -194,7 +194,8 @@ public class SOMTrainerControlsPanel extends JPanel {
             } else {
                 // Stop running
                 trainer.setUpdateCompleted(true);
-                panel.getNetwork().fireGroupUpdated(network);
+                //TODO
+                //panel.getNetwork().fireGroupUpdated(network);
                 putValue(SMALL_ICON, ResourceManager.getImageIcon("Play.png"));
             }
 
@@ -214,9 +215,7 @@ public class SOMTrainerControlsPanel extends JPanel {
             // putValue(SHORT_DESCRIPTION, "Import table from .csv");
         }
 
-        /**
-         * {@inheritDoc}
-         */
+        @Override
         public void actionPerformed(ActionEvent arg0) {
             if (trainer == null) {
                 return;
@@ -224,7 +223,8 @@ public class SOMTrainerControlsPanel extends JPanel {
             try {
                 trainer.apply();
                 updatePanel();
-                panel.getNetwork().fireGroupUpdated(network);
+                //TODO
+                // panel.getNetwork().fireGroupUpdated(network);
             } catch (DataNotInitializedException e) {
                 JOptionPane.showOptionDialog(null, e.getMessage(), "Warning", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
             }
@@ -244,13 +244,12 @@ public class SOMTrainerControlsPanel extends JPanel {
             putValue(SHORT_DESCRIPTION, "Reset network");
         }
 
-        /**
-         * {@inheritDoc}
-         */
+        @Override
         public void actionPerformed(ActionEvent arg0) {
             network.getSom().reset();
             trainer.setIteration(0);
-            panel.getNetwork().fireGroupUpdated(network);
+            //TODO
+            // panel.getNetwork().fireGroupUpdated(network);
             updatePanel();
         }
     };
@@ -266,13 +265,12 @@ public class SOMTrainerControlsPanel extends JPanel {
             putValue(SHORT_DESCRIPTION, "Randomize network");
         }
 
-        /**
-         * {@inheritDoc}
-         */
+        @Override
         public void actionPerformed(ActionEvent arg0) {
             network.getSom().randomizeIncomingWeights();
             updatePanel();
-            panel.getNetwork().fireGroupUpdated(network.getSynapseGroup());
+            //TODO
+            //panel.getNetwork().fireGroupUpdated(network.getSynapseGroup());
         }
     };
 
diff --git a/src/org/simbrain/network/layouts/GridLayout.java b/src/org/simbrain/network/layouts/GridLayout.java
index e26d45e..63b78dd 100644
--- a/src/org/simbrain/network/layouts/GridLayout.java
+++ b/src/org/simbrain/network/layouts/GridLayout.java
@@ -121,9 +121,7 @@ public class GridLayout implements Layout {
     public GridLayout() {
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public void layoutNeurons(final List<Neuron> neurons) {
         int numCols = numColumns;
         if (!manualColumns) {
@@ -196,44 +194,26 @@ public class GridLayout implements Layout {
         return "Grid";
     }
 
-    /**
-     * @return the numColumns
-     */
     public int getNumColumns() {
         return numColumns;
     }
 
-    /**
-     * @param numColumns the numColumns to set
-     */
     public void setNumColumns(final int numColumns) {
         this.numColumns = numColumns;
     }
 
-    /**
-     * @return the hSpacing
-     */
     public double getHSpacing() {
         return hSpacing;
     }
 
-    /**
-     * @param spacing the hSpacing to set
-     */
     public void setHSpacing(final double spacing) {
         hSpacing = spacing;
     }
 
-    /**
-     * @return the vSpacing
-     */
     public double getVSpacing() {
         return vSpacing;
     }
 
-    /**
-     * @param spacing the vSpacing to set
-     */
     public void setVSpacing(final double spacing) {
         vSpacing = spacing;
     }
@@ -243,16 +223,10 @@ public class GridLayout implements Layout {
         return "Grid Layout";
     }
 
-    /**
-     * @return the manualColumns
-     */
     public boolean isManualColumns() {
         return manualColumns;
     }
 
-    /**
-     * @param manualColumns the manualColumns to set
-     */
     public void setManualColumns(boolean manualColumns) {
         this.manualColumns = manualColumns;
     }
diff --git a/src/org/simbrain/network/neuron_update_rules/BinaryRule.java b/src/org/simbrain/network/neuron_update_rules/BinaryRule.java
index 09d7ce3..f70a8af 100755
--- a/src/org/simbrain/network/neuron_update_rules/BinaryRule.java
+++ b/src/org/simbrain/network/neuron_update_rules/BinaryRule.java
@@ -143,13 +143,11 @@ public class BinaryRule extends NeuronUpdateRule {
     @Override
     public void contextualIncrement(Neuron n) {
         n.setActivation(ceiling);
-        n.getNetwork().fireNeuronChanged(n);
     }
 
     @Override
     public void contextualDecrement(Neuron n) {
         n.setActivation(floor);
-        n.getNetwork().fireNeuronChanged(n);
     }
 
     @Override
diff --git a/src/org/simbrain/network/neuron_update_rules/ContinuousSigmoidalRule.java b/src/org/simbrain/network/neuron_update_rules/ContinuousSigmoidalRule.java
index c991a3d..e1d5e1f 100644
--- a/src/org/simbrain/network/neuron_update_rules/ContinuousSigmoidalRule.java
+++ b/src/org/simbrain/network/neuron_update_rules/ContinuousSigmoidalRule.java
@@ -179,7 +179,6 @@ public class ContinuousSigmoidalRule extends AbstractSigmoidalRule {
                 act = getUpperBound();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
@@ -192,9 +191,9 @@ public class ContinuousSigmoidalRule extends AbstractSigmoidalRule {
                 act = getLowerBound();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
+
     @Override
     public TimeType getTimeType() {
         return TimeType.CONTINUOUS;
diff --git a/src/org/simbrain/network/neuron_update_rules/DecayRule.java b/src/org/simbrain/network/neuron_update_rules/DecayRule.java
index c3e0fff..153d76f 100644
--- a/src/org/simbrain/network/neuron_update_rules/DecayRule.java
+++ b/src/org/simbrain/network/neuron_update_rules/DecayRule.java
@@ -197,7 +197,6 @@ public class DecayRule extends NeuronUpdateRule implements BoundedUpdateRule, Cl
                 act = act + n.getIncrement();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
@@ -213,7 +212,6 @@ public class DecayRule extends NeuronUpdateRule implements BoundedUpdateRule, Cl
                 act = act - n.getIncrement();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
diff --git a/src/org/simbrain/network/neuron_update_rules/IACRule.java b/src/org/simbrain/network/neuron_update_rules/IACRule.java
index efb51e4..da5997b 100644
--- a/src/org/simbrain/network/neuron_update_rules/IACRule.java
+++ b/src/org/simbrain/network/neuron_update_rules/IACRule.java
@@ -171,7 +171,6 @@ public class IACRule extends NeuronUpdateRule implements BoundedUpdateRule, Clip
                 act = act + n.getIncrement();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
@@ -187,7 +186,6 @@ public class IACRule extends NeuronUpdateRule implements BoundedUpdateRule, Clip
                 act = act - n.getIncrement();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
diff --git a/src/org/simbrain/network/neuron_update_rules/KuramotoRule.java b/src/org/simbrain/network/neuron_update_rules/KuramotoRule.java
index 6b8ea53..f53ba24 100644
--- a/src/org/simbrain/network/neuron_update_rules/KuramotoRule.java
+++ b/src/org/simbrain/network/neuron_update_rules/KuramotoRule.java
@@ -147,7 +147,6 @@ public class KuramotoRule extends NeuronUpdateRule implements BiasedUpdateRule,
                 act = act + n.getIncrement();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
@@ -163,7 +162,6 @@ public class KuramotoRule extends NeuronUpdateRule implements BiasedUpdateRule,
                 act = act - n.getIncrement();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
diff --git a/src/org/simbrain/network/neuron_update_rules/LinearRule.java b/src/org/simbrain/network/neuron_update_rules/LinearRule.java
index c642d58..6edd5d5 100644
--- a/src/org/simbrain/network/neuron_update_rules/LinearRule.java
+++ b/src/org/simbrain/network/neuron_update_rules/LinearRule.java
@@ -142,7 +142,6 @@ public class LinearRule extends NeuronUpdateRule implements BiasedUpdateRule, Di
                 act = act + n.getIncrement();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
@@ -158,7 +157,6 @@ public class LinearRule extends NeuronUpdateRule implements BiasedUpdateRule, Di
                 act = act - n.getIncrement();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
diff --git a/src/org/simbrain/network/neuron_update_rules/NakaRushtonRule.java b/src/org/simbrain/network/neuron_update_rules/NakaRushtonRule.java
index 05b950a..5a588a3 100644
--- a/src/org/simbrain/network/neuron_update_rules/NakaRushtonRule.java
+++ b/src/org/simbrain/network/neuron_update_rules/NakaRushtonRule.java
@@ -194,7 +194,6 @@ public class NakaRushtonRule extends NeuronUpdateRule implements BoundedUpdateRu
                 act = getUpperBound();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
diff --git a/src/org/simbrain/network/neuron_update_rules/PointNeuronRule.java b/src/org/simbrain/network/neuron_update_rules/PointNeuronRule.java
index 70901dc..d6d981a 100644
--- a/src/org/simbrain/network/neuron_update_rules/PointNeuronRule.java
+++ b/src/org/simbrain/network/neuron_update_rules/PointNeuronRule.java
@@ -23,8 +23,6 @@ import org.simbrain.network.core.Neuron;
 import org.simbrain.network.core.NeuronUpdateRule;
 import org.simbrain.network.core.Synapse;
 import org.simbrain.network.core.SynapseUpdateRule;
-import org.simbrain.network.listeners.NetworkEvent;
-import org.simbrain.network.listeners.SynapseListener;
 import org.simbrain.network.neuron_update_rules.interfaces.BiasedUpdateRule;
 import org.simbrain.util.math.SimbrainMath;
 
@@ -36,7 +34,7 @@ import java.util.Random;
  * Cognitive Neuroscience, chapter 2. All page references below are are to this
  * book.
  */
-public class PointNeuronRule extends NeuronUpdateRule implements SynapseListener, BiasedUpdateRule {
+public class PointNeuronRule extends NeuronUpdateRule implements BiasedUpdateRule {
 
     /**
      * Excitatory inputs for connected Synapses.
@@ -189,7 +187,6 @@ public class PointNeuronRule extends NeuronUpdateRule implements SynapseListener
          * function.
          */
         LINEAR {
-            /** {@inheritDoc} */
             @Override
             public String toString() {
                 return "Linear";
@@ -202,7 +199,6 @@ public class PointNeuronRule extends NeuronUpdateRule implements SynapseListener
          * to represent saturation or a max and min firing rate.
          */
         RATE_CODE {
-            /** {@inheritDoc} */
             @Override
             public String toString() {
                 return "Rate Code";
@@ -213,7 +209,6 @@ public class PointNeuronRule extends NeuronUpdateRule implements SynapseListener
          * TODO: No implementation.
          */
         NOISY_RATE_CODE {
-            /** {@inheritDoc} */
             @Override
             public String toString() {
                 return "Noisy Rate Code";
@@ -224,7 +219,6 @@ public class PointNeuronRule extends NeuronUpdateRule implements SynapseListener
          * The membrane potential is the output.
          */
         NONE {
-            /** {@inheritDoc} */
             @Override
             public String toString() {
                 return "Membrane Potential";
@@ -238,19 +232,8 @@ public class PointNeuronRule extends NeuronUpdateRule implements SynapseListener
 
     }
 
-    ;
-
-    /**
-     * {@inheritDoc}
-     *
-     * @param neuron
-     */
     public void init(Neuron neuron) {
         setInputLists(neuron);
-        if (neuron.getNetwork() != null) {
-            neuron.getNetwork().addSynapseListener(this);
-        }
-
     }
 
     /**
@@ -287,16 +270,12 @@ public class PointNeuronRule extends NeuronUpdateRule implements SynapseListener
         }
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public TimeType getTimeType() {
         return TimeType.DISCRETE;
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public PointNeuronRule deepCopy() {
         PointNeuronRule cn = new PointNeuronRule();
         cn.setBias(bias);
@@ -320,9 +299,7 @@ public class PointNeuronRule extends NeuronUpdateRule implements SynapseListener
         // updated by pressing "clear"
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public void update(Neuron neuron) {
 
         // Calculate the excitatory conductance (p. 44, eq. 2.16)
@@ -372,9 +349,6 @@ public class PointNeuronRule extends NeuronUpdateRule implements SynapseListener
         // printState(neuron);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public double getRandomValue() {
         Random rand = new Random();
@@ -484,320 +458,189 @@ public class PointNeuronRule extends NeuronUpdateRule implements SynapseListener
         }
     }
 
-    /**
-     * @return the netTimeConstant
-     */
     public double getNetTimeConstant() {
         return netTimeConstant;
     }
 
-    /**
-     * @param netTimeConstant the netTimeConstant to set
-     */
     public void setNetTimeConstant(double netTimeConstant) {
         this.netTimeConstant = netTimeConstant;
     }
 
-    /**
-     * @return the excitatoryMaxConductance
-     */
     public double getExcitatoryMaxConductance() {
         return excitatoryMaxConductance;
     }
 
-    /**
-     * @param excitatoryMaxConductance the excitatoryMaxConductance to set
-     */
     public void setExcitatoryMaxConductance(double excitatoryMaxConductance) {
         this.excitatoryMaxConductance = excitatoryMaxConductance;
     }
 
-    /**
-     * @return the excitatoryConductance
-     */
     public double getExcitatoryConductance() {
         return excitatoryConductance;
     }
 
-    /**
-     * @param excitatoryConductance the excitatoryConductance to set
-     */
     public void setExcitatoryConductance(double excitatoryConductance) {
         this.excitatoryConductance = excitatoryConductance;
     }
 
-    /**
-     * @return the membranePotential
-     */
     public double getMembranePotential() {
         return membranePotential;
     }
 
-    /**
-     * @param membranePotential the membranePotential to set
-     */
     public void setMembranePotential(double membranePotential) {
         this.membranePotential = membranePotential;
     }
 
-    /**
-     * @return the excitatoryReversal
-     */
     public double getExcitatoryReversal() {
         return excitatoryReversal;
     }
 
-    /**
-     * @param excitatoryReversal the excitatoryReversal to set
-     */
     public void setExcitatoryReversal(double excitatoryReversal) {
         this.excitatoryReversal = excitatoryReversal;
     }
 
-    /**
-     * @return the leakReversal
-     */
     public double getLeakReversal() {
         return leakReversal;
     }
 
-    /**
-     * @param leakReversal the leakReversal to set
-     */
     public void setLeakReversal(double leakReversal) {
         this.leakReversal = leakReversal;
     }
 
-    /**
-     * @return the leakMaxConductance
-     */
     public double getLeakMaxConductance() {
         return leakMaxConductance;
     }
 
-    /**
-     * @param leakMaxConductance the leakMaxConductance to set
-     */
     public void setLeakMaxConductance(double leakMaxConductance) {
         this.leakMaxConductance = leakMaxConductance;
     }
 
-    /**
-     * @return the leakConductance
-     */
     public double getLeakConductance() {
         return leakConductance;
     }
 
-    /**
-     * @param leakConductance the leakConductance to set
-     */
     public void setLeakConductance(double leakConductance) {
         this.leakConductance = leakConductance;
     }
 
-    /**
-     * @return the potentialTimeConstant
-     */
     public double getPotentialTimeConstant() {
         return potentialTimeConstant;
     }
 
-    /**
-     * @param potentialTimeConstant the potentialTimeConstant to set
-     */
     public void setPotentialTimeConstant(double potentialTimeConstant) {
         this.potentialTimeConstant = potentialTimeConstant;
     }
 
-    /**
-     * @return the currentOutputFunction
-     */
     public OutputFunction getOutputFunction() {
         return outputFunction;
     }
 
-    /**
-     * @param currentOutputFunction the currentOutputFunction to set
-     */
     public void setOutputFunction(OutputFunction currentOutputFunction) {
         this.outputFunction = currentOutputFunction;
     }
 
-    /**
-     * @return the gain
-     */
     public double getGain() {
         return gain;
     }
 
-    /**
-     * @param gain the gain to set
-     */
     public void setGain(double gain) {
         this.gain = gain;
     }
 
-    /**
-     * @return the threshold
-     */
     public double getThresholdPotential() {
         return thresholdPotential;
     }
 
-    /**
-     * @param threshold the threshold to set
-     */
     public void setThresholdPotential(double threshold) {
         this.thresholdPotential = threshold;
     }
 
-    /**
-     * @return the refractoryPotential
-     */
     public double getRefractoryPotential() {
         return refractoryPotential;
     }
 
-    /**
-     * @param refractoryPotential the refractoryPotential to set
-     */
     public void setRefractoryPotential(double refractoryPotential) {
         this.refractoryPotential = refractoryPotential;
     }
 
-    /**
-     * @param excitatoryInputs the excitatoryInputs to set
-     */
     public void setExcitatoryInputs(ArrayList<Synapse> excitatoryInputs) {
         this.excitatoryInputs = excitatoryInputs;
     }
 
-    /**
-     * @return the inhibitoryReversal
-     */
     public double getInhibitoryReversal() {
         return inhibitoryReversal;
     }
 
-    /**
-     * @param inhibitoryReversal the inhibitoryReversal to set
-     */
     public void setInhibitoryReversal(double inhibitoryReversal) {
         this.inhibitoryReversal = inhibitoryReversal;
     }
 
-    /**
-     * @return the excitatoryCurrent
-     */
     public double getExcitatoryCurrent() {
         return excitatoryCurrent;
     }
 
-    /**
-     * @param excitatoryCurrent the excitatoryCurrent to set
-     */
     public void setExcitatoryCurrent(double excitatoryCurrent) {
         this.excitatoryCurrent = excitatoryCurrent;
     }
 
-    /**
-     * @return the duration
-     */
     public int getDuration() {
         return duration;
     }
 
-    /**
-     * @param duration the duration to set
-     */
     public void setDuration(int duration) {
         this.duration = duration;
     }
 
-    /**
-     * @return the inhibitoryConductance
-     */
     public double getInhibitoryConductance() {
         return inhibitoryConductance;
     }
 
-    /**
-     * @param inhibitoryConductance the inhibitoryConductance to set
-     */
     public void setInhibitoryConductance(double inhibitoryConductance) {
         this.inhibitoryConductance = inhibitoryConductance;
     }
 
-    /**
-     * @return the inhibitoryMaxConductance
-     */
     public double getInhibitoryMaxConductance() {
         return inhibitoryMaxConductance;
     }
 
-    /**
-     * @param inhibitoryMaxConductance the inhibitoryMaxConductance to set
-     */
     public void setInhibitoryMaxConductance(double inhibitoryMaxConductance) {
         this.inhibitoryMaxConductance = inhibitoryMaxConductance;
     }
 
-    /**
-     * @return the bias
-     */
     public double getBias() {
         return bias;
     }
 
-    /**
-     * @param bias the bias to set
-     */
     public void setBias(double bias) {
         this.bias = bias;
     }
 
-    /**
-     * {@inheritDoc}
-     */
-    public void synapseAdded(NetworkEvent<Synapse> networkEvent) {
-        Synapse synapse = networkEvent.getObject();
-        if (synapse.getTarget().getUpdateRule() == this) {
-            addSynapseToList(synapse);
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void synapseChanged(NetworkEvent<Synapse> networkEvent) {
-        Synapse synapse = networkEvent.getObject();
-        if (synapse.getTarget().getUpdateRule() == this) {
-            addSynapseToList(synapse);
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void synapseRemoved(NetworkEvent<Synapse> networkEvent) {
-        Synapse synapse = networkEvent.getObject();
-        if (synapse.getTarget().getUpdateRule() == this) {
-            if (excitatoryInputs.contains(synapse)) {
-                excitatoryInputs.remove(synapse);
-            }
-            if (inhibitoryInputs.contains(synapse)) {
-                inhibitoryInputs.remove(synapse);
-            }
-        }
-    }
+    // TODO
+    // public void synapseAdded(NetworkEvent<Synapse> networkEvent) {
+    //     Synapse synapse = networkEvent.getObject();
+    //     if (synapse.getTarget().getUpdateRule() == this) {
+    //         addSynapseToList(synapse);
+    //     }
+    // }
+    //
+    // public void synapseChanged(NetworkEvent<Synapse> networkEvent) {
+    //     Synapse synapse = networkEvent.getObject();
+    //     if (synapse.getTarget().getUpdateRule() == this) {
+    //         addSynapseToList(synapse);
+    //     }
+    // }
+    //
+    // public void synapseRemoved(NetworkEvent<Synapse> networkEvent) {
+    //     Synapse synapse = networkEvent.getObject();
+    //     if (synapse.getTarget().getUpdateRule() == this) {
+    //         if (excitatoryInputs.contains(synapse)) {
+    //             excitatoryInputs.remove(synapse);
+    //         }
+    //         if (inhibitoryInputs.contains(synapse)) {
+    //             inhibitoryInputs.remove(synapse);
+    //         }
+    //     }
+    // }
 
-    /**
-     * {@inheritDoc}
-     */
-    public void synapseTypeChanged(NetworkEvent<SynapseUpdateRule> networkEvent) {
-        // No implementation
-    }
 
     @Override
     public String getName() {
diff --git a/src/org/simbrain/network/neuron_update_rules/SigmoidalRule.java b/src/org/simbrain/network/neuron_update_rules/SigmoidalRule.java
index 4835608..2bc78c5 100644
--- a/src/org/simbrain/network/neuron_update_rules/SigmoidalRule.java
+++ b/src/org/simbrain/network/neuron_update_rules/SigmoidalRule.java
@@ -86,7 +86,6 @@ public class SigmoidalRule extends AbstractSigmoidalRule implements TransferFunc
                 act = getUpperBound();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
@@ -99,7 +98,6 @@ public class SigmoidalRule extends AbstractSigmoidalRule implements TransferFunc
                 act = getLowerBound();
             }
             n.setActivation(act);
-            n.getNetwork().fireNeuronChanged(n);
         }
     }
 
diff --git a/src/org/simbrain/network/subnetworks/BoltzmannMachine.java b/src/org/simbrain/network/subnetworks/BoltzmannMachine.java
index f40dd2f..5b0415d 100644
--- a/src/org/simbrain/network/subnetworks/BoltzmannMachine.java
+++ b/src/org/simbrain/network/subnetworks/BoltzmannMachine.java
@@ -141,7 +141,8 @@ public class BoltzmannMachine extends Subnetwork implements Trainable {
             this.temperature = .95 * temperature;
         }
 
-        this.getParentNetwork().fireGroupParametersChanged(this);
+        //TODO
+        //this.getParentNetwork().fireGroupParametersChanged(this);
     }
 
     @Override
diff --git a/src/org/simbrain/network/subnetworks/FeedForward.java b/src/org/simbrain/network/subnetworks/FeedForward.java
index 062b06f..9c9b254 100644
--- a/src/org/simbrain/network/subnetworks/FeedForward.java
+++ b/src/org/simbrain/network/subnetworks/FeedForward.java
@@ -135,16 +135,10 @@ public class FeedForward extends Subnetwork {
         }
     }
 
-    /**
-     * @return the betweenLayerInterval
-     */
     public int getBetweenLayerInterval() {
         return betweenLayerInterval;
     }
 
-    /**
-     * @param betweenLayerInterval the betweenLayerInterval to set
-     */
     public void setBetweenLayerInterval(int betweenLayerInterval) {
         this.betweenLayerInterval = betweenLayerInterval;
     }
@@ -155,20 +149,10 @@ public class FeedForward extends Subnetwork {
         group.setLabel("Layer " + getNeuronGroupCount());
     }
 
-    /**
-     * Returns the input layer.
-     *
-     * @return the input layer
-     */
     public NeuronGroup getInputLayer() {
         return getNeuronGroup(0);
     }
 
-    /**
-     * Returns the hidden layer of a 3 layer network (or just the second layer).
-     *
-     * @return the hidden layer
-     */
     public NeuronGroup getHiddenLayer() {
         return getHiddenLayer(0);
     }
@@ -183,11 +167,6 @@ public class FeedForward extends Subnetwork {
         return getNeuronGroup(index + 1);
     }
 
-    /**
-     * Returns the output layer.
-     *
-     * @return the output layer
-     */
     public NeuronGroup getOutputLayer() {
         return getNeuronGroup(getNeuronGroupCount() - 1);
     }
diff --git a/src/org/simbrain/network/subnetworks/Hopfield.java b/src/org/simbrain/network/subnetworks/Hopfield.java
index cc6788e..b241638 100755
--- a/src/org/simbrain/network/subnetworks/Hopfield.java
+++ b/src/org/simbrain/network/subnetworks/Hopfield.java
@@ -25,6 +25,9 @@ import org.simbrain.network.core.Synapse;
 import org.simbrain.network.groups.Group;
 import org.simbrain.network.groups.NeuronGroup;
 import org.simbrain.network.groups.Subnetwork;
+import org.simbrain.network.layouts.GridLayout;
+import org.simbrain.network.layouts.HexagonalGridLayout;
+import org.simbrain.network.layouts.Layout;
 import org.simbrain.network.neuron_update_rules.BinaryRule;
 import org.simbrain.network.trainers.Trainable;
 import org.simbrain.network.trainers.TrainingSet;
@@ -49,6 +52,12 @@ public class Hopfield extends Subnetwork implements Trainable {
      */
     public static final int DEFAULT_NUM_UNITS = 36;
 
+
+    /**
+     * The update function used by this Hopfield network.
+     */
+    public static final boolean DEFAULT_PRIORITY = false;
+
     /**
      * Number of neurons.
      */
@@ -59,11 +68,12 @@ public class Hopfield extends Subnetwork implements Trainable {
      */
     private HopfieldUpdate updateFunc = DEFAULT_UPDATE;
 
+
     /**
      * If true, if the network's update order is sequential, it will update in
      * order of priority.
      */
-    private boolean byPriority = false;
+    private boolean byPriority = DEFAULT_PRIORITY;
 
     /**
      * The set of neurons... here as a hack while the priority update within
@@ -77,6 +87,11 @@ public class Hopfield extends Subnetwork implements Trainable {
     private final TrainingSet trainingSet = new TrainingSet();
 
     /**
+     * Default layout for Hopfield nets.
+     */
+    public static final Layout DEFAULT_LAYOUT = new GridLayout(50, 50);
+
+    /**
      * Creates a new Hopfield network.
      *
      * @param numNeurons Number of neurons in new network
@@ -94,8 +109,10 @@ public class Hopfield extends Subnetwork implements Trainable {
 
         // Create main neuron group
         NeuronGroup neuronGroup = new NeuronGroup(root, numNeurons);
+        neuronGroup.setLayout(DEFAULT_LAYOUT);
+        neuronGroup.setLabel("The Neurons");
+        neuronGroup.applyLayout();
         addNeuronGroup(neuronGroup);
-        getNeuronGroup().setLabel("Neurons");
 
         // Set neuron rule
         BinaryRule binary = new BinaryRule();
@@ -139,7 +156,6 @@ public class Hopfield extends Subnetwork implements Trainable {
                 }
             }
         }
-        getParentNetwork().fireGroupUpdated(this.getSynapseGroup());
     }
 
     @Override
@@ -147,13 +163,6 @@ public class Hopfield extends Subnetwork implements Trainable {
         updateFunc.update(this);
     }
 
-    /**
-     * @return The number of neurons.
-     */
-    public int getNumUnits() {
-        return numUnits;
-    }
-
     @Override
     public String getUpdateMethodDesecription() {
         return updateFunc.getDescription();
@@ -189,7 +198,8 @@ public class Hopfield extends Subnetwork implements Trainable {
             Neuron tar = w.getTarget();
             getSynapseGroup().setSynapseStrength(w, w.getStrength() + bipolar(src.getActivation()) * bipolar(tar.getActivation()));
         }
-        getParentNetwork().fireGroupUpdated(getSynapseGroup());
+        //TODO
+        //getParentNetwork().fireGroupUpdated(getSynapseGroup());
     }
 
     /**
@@ -203,44 +213,26 @@ public class Hopfield extends Subnetwork implements Trainable {
         return in == 0 ? -1 : in;
     }
 
-    /**
-     * @return the updateFunc
-     */
     public HopfieldUpdate getUpdateFunc() {
         return updateFunc;
     }
 
-    /**
-     * @param updateFunc the updateFunc to set
-     */
     public void setUpdateFunc(HopfieldUpdate updateFunc) {
         this.updateFunc = updateFunc;
     }
 
-    /**
-     * @return the neuronSet
-     */
     public HashSet<Neuron> getNeuronSet() {
         return neuronSet;
     }
 
-    /**
-     * @param neuronSet the neuronSet to set
-     */
     public void setNeuronSet(HashSet<Neuron> neuronSet) {
         this.neuronSet = neuronSet;
     }
 
-    /**
-     * @return the byPriority
-     */
     public boolean isByPriority() {
         return byPriority;
     }
 
-    /**
-     * @param byPriority the byPriority to set
-     */
     public void setByPriority(boolean byPriority) {
         this.byPriority = byPriority;
     }
diff --git a/src/org/simbrain/network/trainers/HopfieldTrainer.java b/src/org/simbrain/network/trainers/HopfieldTrainer.java
index adfb657..ac43b20 100644
--- a/src/org/simbrain/network/trainers/HopfieldTrainer.java
+++ b/src/org/simbrain/network/trainers/HopfieldTrainer.java
@@ -80,7 +80,8 @@ public class HopfieldTrainer extends Trainer {
         revalidateSynapseGroups();
 
         // Update GUI
-        hopfield.getParentNetwork().fireGroupUpdated(hopfield);
+        //TODO
+        //hopfield.getParentNetwork().fireGroupUpdated(hopfield);
     }
 
 }
diff --git a/src/org/simbrain/network/update_actions/ConcurrentBufferedUpdate.java b/src/org/simbrain/network/update_actions/ConcurrentBufferedUpdate.java
index dabf956..43c088b 100644
--- a/src/org/simbrain/network/update_actions/ConcurrentBufferedUpdate.java
+++ b/src/org/simbrain/network/update_actions/ConcurrentBufferedUpdate.java
@@ -24,10 +24,9 @@ import org.simbrain.network.groups.Group;
 import org.simbrain.network.groups.NeuronGroup;
 import org.simbrain.network.groups.Subnetwork;
 import org.simbrain.network.groups.SynapseGroup;
+import org.simbrain.network.gui.NetworkPanel;
+import org.simbrain.network.gui.nodes.NeuronArrayNode;
 import org.simbrain.network.layouts.GridLayout;
-import org.simbrain.network.listeners.GroupListener;
-import org.simbrain.network.listeners.NetworkEvent;
-import org.simbrain.network.listeners.NeuronListener;
 import org.simbrain.network.neuron_update_rules.IzhikevichRule;
 import org.simbrain.network.synapse_update_rules.spikeresponders.ConvolvedJumpAndDecay;
 import org.simbrain.network.update_actions.concurrency_tools.BufferedUpdateTask;
@@ -39,43 +38,44 @@ import org.simbrain.util.math.SimbrainMath;
 import org.simbrain.util.math.ProbDistributions.LogNormalDistribution;
 import org.simbrain.util.math.ProbDistributions.NormalDistribution;
 
+import java.awt.*;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
 import java.io.File;
 import java.util.*;
+import java.util.List;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
- * @author Zoë Tosi
- * <p>
- * A class which performs a parallelized update of an entire network.
- * Any given thread which is updating a neuron is also responsible for
- * updating all the afferent synapses of that neuron. Update occurs
- * synchronously using the same technique as buffered update, despite
- * being concurrent.
+ * A class which performs a parallelized update of an entire network. Any given
+ * thread which is updating a neuron is also responsible for updating all the
+ * afferent synapses of that neuron. Update occurs synchronously using the same
+ * technique as buffered update, despite being concurrent.
  * <p>
- * This class keeps its own separate list of neurons in the network
- * because for networks with groups, it would be expensive to extract
- * neuron groups from a generic groups list every invocation. Instead it
- * implements a group and neuron listener and updates its internal set
- * of neurons when/if neurons or neuron groups are added to or removed
- * from the network.
+ * This class keeps its own separate list of neurons in the network because for
+ * networks with groups, it would be expensive to extract neuron groups from a
+ * generic groups list every invocation. Instead it implements a group and
+ * neuron listener and updates its internal set of neurons when/if neurons or
+ * neuron groups are added to or removed from the network.
  * <p>
  * Parallelization in this class follows a classical consumer/producer
- * framework. One thread: the producer has the job of filling a blocking
- * queue with tasks for the consumers to take. The consumers take tasks
- * from the queue and execute them until the queue is empty. In this
- * way, consumers can take on tasks whenever they are available to do so
- * and there are more tasks to complete, instead of having to wait on
- * some other condition. In order to keep the sort of synchronization
- * necessary for a neural network, a cyclic barrier ensures that all
- * tasks have been completed before more tasks (amounting to the next
- * network iteration/update) are allowed in the queue. Furthermore this
- * class implements a synchronous or buffered update. The producer
- * thread does not set the activation of each neuron to their buffer
- * values until all tasks have been completed.
+ * framework. One thread: the producer has the job of filling a blocking queue
+ * with tasks for the consumers to take. The consumers take tasks from the queue
+ * and execute them until the queue is empty. In this way, consumers can take on
+ * tasks whenever they are available to do so and there are more tasks to
+ * complete, instead of having to wait on some other condition. In order to keep
+ * the sort of synchronization necessary for a neural network, a cyclic barrier
+ * ensures that all tasks have been completed before more tasks (amounting to
+ * the next network iteration/update) are allowed in the queue. Furthermore this
+ * class implements a synchronous or buffered update. The producer thread does
+ * not set the activation of each neuron to their buffer values until all tasks
+ * have been completed.
+ *
+ * @author Zoë Tosi
  */
-public class ConcurrentBufferedUpdate implements NetworkUpdateAction, NeuronListener, GroupListener {
+public class ConcurrentBufferedUpdate implements NetworkUpdateAction {
 
     /**
      * The initial capacity of the set containing this class's private neuron
@@ -122,6 +122,16 @@ public class ConcurrentBufferedUpdate implements NetworkUpdateAction, NeuronList
 
     private final List<NeuronGroup> outputGroups = new ArrayList<NeuronGroup>();
 
+    private Object lock = new Object();
+
+    private AtomicBoolean collectionInProgress = new AtomicBoolean();
+
+    private volatile int ops = 0;
+
+    //private final SynchronizationPoint syncPoint;
+
+    private transient ExecutorService executors;
+
     private transient Thread collectorThread = new Thread(new Runnable() {
         @Override
         public void run() {
@@ -149,22 +159,9 @@ public class ConcurrentBufferedUpdate implements NetworkUpdateAction, NeuronList
         }
     });
 
-    private Object lock = new Object();
-
-    private AtomicBoolean collectionInProgress = new AtomicBoolean();
-
-    private volatile int ops = 0;
-
-    //private final SynchronizationPoint syncPoint;
-
-    private transient ExecutorService executors;
-
     /**
      * A static factory method that creates a concurrent buffered update class
      * for a network. See {@link #ConcurrentBufferedUpdate(Network)}.
-     *
-     * @param network
-     * @return
      */
     public static ConcurrentBufferedUpdate createConcurrentBufferedUpdate(final Network network) {
         ConcurrentBufferedUpdate cbu = new ConcurrentBufferedUpdate(network);
@@ -173,13 +170,13 @@ public class ConcurrentBufferedUpdate implements NetworkUpdateAction, NeuronList
         //            new Thread(cbu.consumerThreads.get(i)).start();
         //        }
 
-        network.addGroupListener(cbu);
-        network.addNeuronListener(cbu);
+
         // Checks for inconsistencies between the input and output group
         // lists and what neuron groups are labeled as input or output
         // groups in the network.
         for (NeuronGroup ng : network.getFlatNeuronGroupList()) {
-            network.fireGroupChanged(ng, "Check In");
+            //TODO
+            // network.fireGroupChanged(ng, "Check In");
         }
         //System.out.println("Num neurons in task set: " + cbu.taskSet.size());
         cbu.collectorThread.start();
@@ -207,9 +204,120 @@ public class ConcurrentBufferedUpdate implements NetworkUpdateAction, NeuronList
             neurons.addAll(ng.getNeuronList());
         }
         taskSet = new CyclicTaskQueue(neurons, currentAvailableProcessors);
+
+        initListeners();
+
+    }
+
+    private void initListeners() {
+        network.addPropertyChangeListener(
+            evt -> {
+                if ("neuronAdded".equals(evt.getPropertyName())) {
+                    pendingOperations.incrementAndGet();
+                    synchronized (collectionInProgress) {
+                        neurons.add((Neuron) evt.getNewValue());
+                        ops++;
+                        if (!collectionInProgress.get()) {
+                            collectionInProgress.getAndSet(true);
+                            synchronized (lock) {
+                                lock.notify();
+                            }
+                        }
+                    }
+                } else if ("neuronRemoved".equals(evt.getPropertyName())) {
+                    pendingOperations.incrementAndGet();
+                    synchronized (collectionInProgress) {
+                        neurons.remove((Neuron) evt.getNewValue());
+                        ops++;
+                        if (!collectionInProgress.get()) {
+                            collectionInProgress.getAndSet(true);
+                            synchronized (lock) {
+                                lock.notify();
+                            }
+                        }
+                    }
+                } else if ("groupAdded".equals(evt.getPropertyName())) {
+                    Group group = (Group) evt.getNewValue();
+                    groupAdded(group);
+                } else if ("groupRemoved".equals(evt.getPropertyName())) {
+                    Group group = (Group) evt.getNewValue();
+                    groupRemoved(group);
+                }
+
+            }
+        );
+    }
+
+    private void groupAdded(Group group) {
+        if (group instanceof NeuronGroup) {
+            NeuronGroup ng = (NeuronGroup)group;
+            pendingOperations.incrementAndGet();
+            synchronized (neurons) {
+                for (Neuron n : ng.getNeuronList()) {
+                    neurons.add(n);
+                }
+                taskSet.repopulateQueue(neurons);
+            }
+            decrementPendingOperations();
+
+            List<NeuronGroup> neuronGroups = ((Subnetwork) group).getNeuronGroupList();
+            ng.addPropertyChangeListener(
+                evt -> {
+                    if ("update".equals(evt.getPropertyName())) {
+                        synchronized (outputGroups) {
+                            if (ng.isRecording()) {
+                                if (!outputGroups.contains(ng)) {
+                                    outputGroups.add(ng);
+                                }
+                            } else {
+                                if (outputGroups.contains(ng)) {
+                                    outputGroups.remove(ng);
+                                }
+                            }
+                        }
+                        synchronized (inputGroups) {
+                            if (ng.isInputMode()) {
+                                if (!inputGroups.contains(ng)) {
+                                    inputGroups.add(ng);
+                                }
+                            } else {
+                                if (inputGroups.contains(ng)) {
+                                    inputGroups.remove(ng);
+                                }
+                            }
+                        }
+                    }
+            });
+            for (NeuronGroup n : neuronGroups) {
+                groupAdded(n);
+            }
+
+
+        } else {
+            return;
+        }
+    }
+
+    private void groupRemoved(Group group) {
+        if (group instanceof NeuronGroup) {
+            pendingOperations.incrementAndGet();
+            synchronized (neurons) {
+                for (Neuron n : ((NeuronGroup) group).getNeuronList()) {
+                    neurons.remove(n);
+                }
+            }
+            taskSet.repopulateQueue(neurons);
+            decrementPendingOperations();
+        } else if (group instanceof Subnetwork) {
+            List<NeuronGroup> neuronGroups = ((Subnetwork) group).getNeuronGroupList();
+            for (NeuronGroup ng : neuronGroups) {
+                groupRemoved(ng);
+            }
+        } else {
+            return;
+        }
     }
 
-    //int z = 0;
     @Override
     public void invoke() {
         producer = Thread.currentThread();
@@ -222,7 +330,8 @@ public class ConcurrentBufferedUpdate implements NetworkUpdateAction, NeuronList
                 //System.out.println(z++);
                 List<Future<Task>> results = executors.invokeAll(taskSet.getCallableTasks());
                 for (int i = 0; i < results.size(); i++) {
-                    for (int j = 0; j < ((BufferedUpdateTask) results.get(i).get()).getHosts().length; j++) {
+                    for (int j = 0; j < ((BufferedUpdateTask) results.get(i).get()).getHosts().length; j++)
+                    {
                         ((BufferedUpdateTask) results.get(i).get()).getHosts()[j].setToBufferVals();
                     }
                 }
@@ -260,134 +369,6 @@ public class ConcurrentBufferedUpdate implements NetworkUpdateAction, NeuronList
         return "Parallel Buffered Update (All Neurons)";
     }
 
-    @Override
-    public void groupAdded(NetworkEvent<Group> e) {
-        if (e.getObject() instanceof NeuronGroup) {
-            pendingOperations.incrementAndGet();
-            synchronized (neurons) {
-                for (Neuron n : ((NeuronGroup) e.getObject()).getNeuronList()) {
-                    neurons.add(n);
-                }
-                taskSet.repopulateQueue(neurons);
-            }
-            decrementPendingOperations();
-        } else if (e.getObject() instanceof Subnetwork) {
-            List<NeuronGroup> neuronGroups = ((Subnetwork) e.getObject()).getNeuronGroupList();
-            for (NeuronGroup ng : neuronGroups) {
-                groupAdded(new NetworkEvent<Group>(network, null, ng));
-            }
-        } else {
-            return;
-        }
-
-    }
-
-    @Override
-    public void groupRemoved(NetworkEvent<Group> e) {
-        if (e.getObject() instanceof NeuronGroup) {
-            pendingOperations.incrementAndGet();
-            synchronized (neurons) {
-                for (Neuron n : ((NeuronGroup) e.getObject()).getNeuronList()) {
-                    neurons.remove(n);
-                }
-            }
-            taskSet.repopulateQueue(neurons);
-            decrementPendingOperations();
-        } else if (e.getObject() instanceof Subnetwork) {
-            List<NeuronGroup> neuronGroups = ((Subnetwork) e.getObject()).getNeuronGroupList();
-            for (NeuronGroup ng : neuronGroups) {
-                groupRemoved(new NetworkEvent<Group>(network, null, ng));
-            }
-        } else {
-            return;
-        }
-    }
-
-    @Override
-    public void groupChanged(NetworkEvent<Group> networkEvent, String changeDescription) {
-        if (networkEvent.getObject() instanceof NeuronGroup) {
-            NeuronGroup ng = (NeuronGroup) networkEvent.getObject();
-            synchronized (outputGroups) {
-                if (ng.isRecording()) {
-                    if (!outputGroups.contains(ng)) {
-                        outputGroups.add(ng);
-                    }
-                } else {
-                    if (outputGroups.contains(ng)) {
-                        outputGroups.remove(ng);
-                    }
-                }
-            }
-            synchronized (inputGroups) {
-                if (ng.isInputMode()) {
-                    if (!inputGroups.contains(ng)) {
-                        inputGroups.add(ng);
-                    }
-                } else {
-                    if (inputGroups.contains(ng)) {
-                        inputGroups.remove(ng);
-                    }
-                }
-            }
-        }
-        return;
-    }
-
-    @Override
-    public void groupParameterChanged(NetworkEvent<Group> networkEvent) {
-        return;
-    }
-
-    @Override
-    public void neuronChanged(NetworkEvent<Neuron> networkEvent) {
-        return;
-    }
-
-    @Override
-    public void neuronTypeChanged(NetworkEvent<NeuronUpdateRule> networkEvent) {
-        return;
-    }
-
-    @Override
-    public void labelChanged(NetworkEvent<Neuron> networkEvent) {
-        return;
-    }
-
-    @Override
-    public void neuronAdded(NetworkEvent<Neuron> networkEvent) {
-        pendingOperations.incrementAndGet();
-        synchronized (collectionInProgress) {
-            neurons.add(networkEvent.getObject());
-            ops++;
-            if (!collectionInProgress.get()) {
-                collectionInProgress.getAndSet(true);
-                synchronized (lock) {
-                    lock.notify();
-                }
-            }
-        }
-    }
-
-    @Override
-    public void neuronMoved(NetworkEvent<Neuron> networkEvent) {
-        return;
-    }
-
-    @Override
-    public void neuronRemoved(NetworkEvent<Neuron> networkEvent) {
-        pendingOperations.incrementAndGet();
-        synchronized (collectionInProgress) {
-            neurons.remove(networkEvent.getObject());
-            ops++;
-            if (!collectionInProgress.get()) {
-                collectionInProgress.getAndSet(true);
-                synchronized (lock) {
-                    lock.notify();
-                }
-            }
-        }
-    }
-
     public List<NeuronGroup> getInputGroups() {
         return new ArrayList<NeuronGroup>(inputGroups);
     }
@@ -596,28 +577,28 @@ public class ConcurrentBufferedUpdate implements NetworkUpdateAction, NeuronList
         GridLayout gl = new GridLayout();
         gl.layoutNeurons(ng.getNeuronList());
         ProbabilityDistribution exRand =
-                LogNormalDistribution.builder()
-                        .polarity(Polarity.EXCITATORY)
-                        .location(0.25)
-                        .scale(1)
-                        .build();
+            LogNormalDistribution.builder()
+                .polarity(Polarity.EXCITATORY)
+                .location(0.25)
+                .scale(1)
+                .build();
 
         ProbabilityDistribution inRand =
-                LogNormalDistribution.builder()
-                        .polarity(Polarity.INHIBITORY)
-                        .location(2)
-                        .scale(2)
-                        .build();
+            LogNormalDistribution.builder()
+                .polarity(Polarity.INHIBITORY)
+                .location(2)
+                .scale(2)
+                .build();
 
         System.out.println("Begin Network Construction...");
         SynapseGroup sg = SynapseGroup.createSynapseGroup(
-                ng,
-                ng,
-                new Sparse(density, false, false),
-                .8,
-                exRand,
-                inRand
-                );
+            ng,
+            ng,
+            new Sparse(density, false, false),
+            .8,
+            exRand,
+            inRand
+        );
         for (Synapse s : sg.getAllSynapses()) {
             s.setId(null);
             s.setFrozen(true);
@@ -721,8 +702,4 @@ public class ConcurrentBufferedUpdate implements NetworkUpdateAction, NeuronList
         return;
     }
 
-    @Override
-    public void groupUpdated(Group group) {
-    }
-
 }
diff --git a/src/org/simbrain/world/odorworld/dialogs/AddSensorDialog.java b/src/org/simbrain/world/odorworld/dialogs/AddSensorDialog.java
index e09dbb6..056c13b 100644
--- a/src/org/simbrain/world/odorworld/dialogs/AddSensorDialog.java
+++ b/src/org/simbrain/world/odorworld/dialogs/AddSensorDialog.java
@@ -49,7 +49,6 @@ public class AddSensorDialog extends StandardDialog {
      */
     private Box mainPanel = Box.createVerticalBox();
 
-
     /**
      * Sensor Dialog add sensor constructor.
      *
diff --git a/src/org/simbrain/world/odorworld/entities/OdorWorldEntity.java b/src/org/simbrain/world/odorworld/entities/OdorWorldEntity.java
index 066cc44..1292167 100644
--- a/src/org/simbrain/world/odorworld/entities/OdorWorldEntity.java
+++ b/src/org/simbrain/world/odorworld/entities/OdorWorldEntity.java
@@ -240,7 +240,7 @@ public class OdorWorldEntity implements EditableObject, AttributeContainer {
             updateHeadingBasedOnVelocity();
         }
 
-        changeSupport.firePropertyChange("updated", null, this);
+        changeSupport.firePropertyChange("update", null, this);
 
     }
 
